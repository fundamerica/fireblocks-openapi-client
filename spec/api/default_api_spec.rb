=begin
#Fireblocks API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.5.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.3.0

=end

require 'spec_helper'
require 'json'

# Unit tests for OpenapiClient::DefaultApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'DefaultApi' do
  before do
    # run before each test
    @api_instance = OpenapiClient::DefaultApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of DefaultApi' do
    it 'should create an instance of DefaultApi' do
      expect(@api_instance).to be_instance_of(OpenapiClient::DefaultApi)
    end
  end

  # unit tests for estimate_network_fee_get
  # Estimates the required fee for a given asset. For UTXO based assets, the response will contain the suggested fee per byte, for ETH/ETC based assets, the suggested gas price, and for XRP/XLM, the transaction fee
  # @param asset_id The asset for which to estimate the fee
  # @param [Hash] opts the optional parameters
  # @return [EstimatedNetworkFeeResponse]
  describe 'estimate_network_fee_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for exchange_accounts_exchange_account_id_asset_id_get
  # Returns a single asset within an exchange account
  # @param exchange_account_id The ID of the exchange account to return
  # @param asset_id The ID of the asset to return
  # @param [Hash] opts the optional parameters
  # @return [ExchangeAsset]
  describe 'exchange_accounts_exchange_account_id_asset_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for exchange_accounts_exchange_account_id_get
  # Returns an exchange account by ID
  # @param exchange_account_id The ID of the exchange account to return
  # @param [Hash] opts the optional parameters
  # @return [ExchangeAccount]
  describe 'exchange_accounts_exchange_account_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for exchange_accounts_exchange_account_id_internal_transfer_post
  # Transfers funds between trading accounts under the same exchange account
  # @param exchange_account_id The ID of the exchange account to return
  # @param [Hash] opts the optional parameters
  # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
  # @return [nil]
  describe 'exchange_accounts_exchange_account_id_internal_transfer_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for exchange_accounts_get
  # Returns all exchange accounts
  # @param [Hash] opts the optional parameters
  # @return [Array<ExchangeAccount>]
  describe 'exchange_accounts_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for external_wallets_get
  # Gets a list of external wallets under the tenant
  # @param [Hash] opts the optional parameters
  # @return [Array<UnmanagedWallet>]
  describe 'external_wallets_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for external_wallets_post
  # Creates a new external wallet
  # @param [Hash] opts the optional parameters
  # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
  # @return [UnmanagedWallet]
  describe 'external_wallets_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for external_wallets_wallet_id_asset_id_delete
  # Deletes an external wallet asset by ID
  # @param wallet_id The ID of the wallet
  # @param asset_id The ID of the asset to delete
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'external_wallets_wallet_id_asset_id_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for external_wallets_wallet_id_asset_id_get
  # Returns an external wallet asset by ID
  # @param wallet_id The ID of the wallet
  # @param asset_id The ID of the asset to return
  # @param [Hash] opts the optional parameters
  # @return [ExternalWalletAsset]
  describe 'external_wallets_wallet_id_asset_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for external_wallets_wallet_id_asset_id_post
  # Adds an asset to an existing external wallet
  # @param wallet_id The ID of the wallet
  # @param asset_id The ID of the asset to add
  # @param [Hash] opts the optional parameters
  # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
  # @return [ExternalWalletAsset]
  describe 'external_wallets_wallet_id_asset_id_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for external_wallets_wallet_id_delete
  # Deletes an external wallet by ID
  # @param wallet_id The ID of the wallet to delete
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'external_wallets_wallet_id_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for external_wallets_wallet_id_get
  # Returns an external wallet by ID
  # @param wallet_id The ID of the wallet to return
  # @param [Hash] opts the optional parameters
  # @return [UnmanagedWallet]
  describe 'external_wallets_wallet_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for external_wallets_wallet_id_set_customer_ref_id_post
  # Sets a reference customer ID for AML
  # @param wallet_id The wallet ID
  # @param unknown_base_type 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'external_wallets_wallet_id_set_customer_ref_id_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for fiat_accounts_account_id_deposit_from_linked_dda_post
  # Deposit funds from DDA
  # @param account_id The ID of the fiat account to use
  # @param [Hash] opts the optional parameters
  # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
  # @return [nil]
  describe 'fiat_accounts_account_id_deposit_from_linked_dda_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for fiat_accounts_account_id_get
  # Returns a fiat account by ID
  # @param account_id The ID of the fiat account to return
  # @param [Hash] opts the optional parameters
  # @return [FiatAccount]
  describe 'fiat_accounts_account_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for fiat_accounts_account_id_redeem_to_linked_dda_post
  # Redeem funds to DDA
  # @param account_id The ID of the fiat account to use
  # @param [Hash] opts the optional parameters
  # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
  # @return [nil]
  describe 'fiat_accounts_account_id_redeem_to_linked_dda_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for fiat_accounts_get
  # Returns all fiat accounts
  # @param [Hash] opts the optional parameters
  # @return [Array<FiatAccount>]
  describe 'fiat_accounts_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for gas_station_configuration_put
  # Sets Gas Station configuration
  # @param gas_station_configuration 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'gas_station_configuration_put test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for gas_station_get
  # Returns a summary of Gas Station configuration and balances
  # @param [Hash] opts the optional parameters
  # @return [GasStationPropertiesResponse]
  describe 'gas_station_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for internal_wallets_get
  # Gets a list of internal wallets
  # @param [Hash] opts the optional parameters
  # @return [Array<UnmanagedWallet>]
  describe 'internal_wallets_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for internal_wallets_post
  # Creates a new internal wallet
  # @param [Hash] opts the optional parameters
  # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
  # @return [UnmanagedWallet]
  describe 'internal_wallets_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for internal_wallets_wallet_id_asset_id_delete
  # Deletes an internal wallet asset by ID
  # @param wallet_id The ID of the wallet
  # @param asset_id The ID of the asset to delete
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'internal_wallets_wallet_id_asset_id_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for internal_wallets_wallet_id_asset_id_get
  # Returns an internal wallet asset by ID
  # @param wallet_id The ID of the wallet
  # @param asset_id The ID of the asset to return
  # @param [Hash] opts the optional parameters
  # @return [WalletAsset]
  describe 'internal_wallets_wallet_id_asset_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for internal_wallets_wallet_id_asset_id_post
  # Create asset to an existing internal wallet
  # @param wallet_id The ID of the wallet
  # @param asset_id The ID of the asset to add
  # @param [Hash] opts the optional parameters
  # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
  # @return [WalletAsset]
  describe 'internal_wallets_wallet_id_asset_id_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for internal_wallets_wallet_id_delete
  # Deletes an internal wallet by ID
  # @param wallet_id The ID of the wallet to delete
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'internal_wallets_wallet_id_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for internal_wallets_wallet_id_get
  # Returns an internal wallet by ID
  # @param wallet_id The ID of the wallet to return
  # @param [Hash] opts the optional parameters
  # @return [UnmanagedWallet]
  describe 'internal_wallets_wallet_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for internal_wallets_wallet_id_set_customer_ref_id_post
  # Sets a reference customer ID for AML
  # @param wallet_id The wallet ID
  # @param unknown_base_type 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'internal_wallets_wallet_id_set_customer_ref_id_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for network_connections_connection_id_get
  # Gets a network connection by ID
  # @param connection_id The ID of the connection
  # @param [Hash] opts the optional parameters
  # @return [NetworkConnectionResponse]
  describe 'network_connections_connection_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for network_connections_get
  # Returns all network connections
  # @param [Hash] opts the optional parameters
  # @return [Array<NetworkConnectionResponse>]
  describe 'network_connections_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for off_exchange_accounts_get
  # Get off exchanges
  # @param [Hash] opts the optional parameters
  # @return [Array<OffExchangeEntityResponse>]
  describe 'off_exchange_accounts_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for off_exchange_accounts_virtual_account_id_get
  # Get off exchange by it&#39;s ID
  # @param virtual_account_id The ID of the off exchange entity
  # @param [Hash] opts the optional parameters
  # @return [OffExchangeEntityResponse]
  describe 'off_exchange_accounts_virtual_account_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for off_exchange_accounts_virtual_account_id_settle_post
  # Settle an off exchange entity
  # @param virtual_account_id The ID of the off exchange entity
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'off_exchange_accounts_virtual_account_id_settle_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for supported_assets_get
  # Returns all asset types supported by Fireblocks
  # @param [Hash] opts the optional parameters
  # @return [Array<AssetTypeResponse>]
  describe 'supported_assets_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for transactions_estimate_fee_post
  # Estimates the transaction fee for a given transaction request
  # @param [Hash] opts the optional parameters
  # @option opts [TransactionRequest] :transaction_request 
  # @return [EstimatedTransactionFeeResponse]
  describe 'transactions_estimate_fee_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for transactions_external_tx_id_external_tx_id_get
  # Returns transaction by external transaction ID
  # @param external_tx_id The external ID of the transaction to return
  # @param [Hash] opts the optional parameters
  # @return [TransactionResponse]
  describe 'transactions_external_tx_id_external_tx_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for transactions_get
  # Gets a list of transactions under the tenant
  # @param [Hash] opts the optional parameters
  # @option opts [String] :before Unix timestamp in milliseconds. Returns only transactions created before the specified date
  # @option opts [String] :after Unix timestamp in milliseconds. Returns only transactions created after the specified date
  # @option opts [String] :status Comma-separated list of statuses. Returns only transactions with one of the specified statuses
  # @option opts [String] :order_by The field to order the results by
  # @option opts [Integer] :limit Limits the number of results. If not provided, a limit of 200 will be used. The maximum allowed limit is 500
  # @option opts [String] :source_type The source type of the transaction
  # @option opts [String] :source_id The source ID of the transaction
  # @option opts [String] :dest_type The destination type of the transaction
  # @option opts [String] :dest_id The destination ID of the transaction
  # @option opts [String] :assets A list of assets to filter by, seperated by commas
  # @option opts [String] :tx_hash Returns only results with a specified txHash
  # @return [Array<TransactionResponse>]
  describe 'transactions_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for transactions_post
  # Creates a new transaction
  # @param [Hash] opts the optional parameters
  # @option opts [TransactionRequest] :transaction_request 
  # @return [CreateTransactionResponse]
  describe 'transactions_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for transactions_tx_id_cancel_post
  # Cancels a transaction by ID
  # @param tx_id The ID of the transaction to cancel
  # @param [Hash] opts the optional parameters
  # @return [CancelTransactionResponse]
  describe 'transactions_tx_id_cancel_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for transactions_tx_id_drop_post
  # Drop ETH based transaction by ID
  # @param tx_id The ID of the transaction
  # @param [Hash] opts the optional parameters
  # @option opts [DropTransactionRequest] :drop_transaction_request 
  # @return [DropTransactionResponse]
  describe 'transactions_tx_id_drop_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for transactions_tx_id_freeze_post
  # Freezes a transaction by ID
  # @param tx_id The ID of the transaction to freeze
  # @param [Hash] opts the optional parameters
  # @return [FreezeTransactionResponse]
  describe 'transactions_tx_id_freeze_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for transactions_tx_id_get
  # Returns a transaction by ID
  # @param tx_id The ID of the transaction to return
  # @param [Hash] opts the optional parameters
  # @return [TransactionResponse]
  describe 'transactions_tx_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for transactions_tx_id_set_confirmation_threshold_post
  # Overrides the required number of confirmations for a transaction completion by transaction ID
  # @param tx_id The ID of the transaction
  # @param [Hash] opts the optional parameters
  # @option opts [SetConfirmationsThresholdRequest] :set_confirmations_threshold_request 
  # @return [SetConfirmationsThresholdResponse]
  describe 'transactions_tx_id_set_confirmation_threshold_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for transactions_tx_id_unfreeze_post
  # Unfreezes a transaction by ID
  # @param tx_id The ID of the transaction to unfreeze
  # @param [Hash] opts the optional parameters
  # @return [UnfreezeTransactionResponse]
  describe 'transactions_tx_id_unfreeze_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for transactions_validate_address_asset_id_address_get
  # Check if given address is valid
  # @param asset_id The asset of the address
  # @param address The address to validate
  # @param [Hash] opts the optional parameters
  # @return [ValidateAddressResponse]
  describe 'transactions_validate_address_asset_id_address_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for transfer_tickets_get
  # Gets a list of transfer tickets
  # @param [Hash] opts the optional parameters
  # @return [Array<TransferTicketResponse>]
  describe 'transfer_tickets_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for transfer_tickets_post
  # Creates a new transfer ticket
  # @param [Hash] opts the optional parameters
  # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
  # @return [CreateTransferTicketResponse]
  describe 'transfer_tickets_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for transfer_tickets_ticket_id_cancel_post
  # Cancel a transfer request
  # @param ticket_id The ID of the ticket
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'transfer_tickets_ticket_id_cancel_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for transfer_tickets_ticket_id_get
  # Get a specific ticket by ticket ID
  # @param ticket_id The ID of the ticket
  # @param [Hash] opts the optional parameters
  # @return [TransferTicketResponse]
  describe 'transfer_tickets_ticket_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for transfer_tickets_ticket_id_term_id_get
  # Get a term by ticket ID and term ID
  # @param ticket_id The ID of the ticket
  # @param term_id The ID of the term
  # @param [Hash] opts the optional parameters
  # @return [TransferTicketTermResponse]
  describe 'transfer_tickets_ticket_id_term_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for transfer_tickets_ticket_id_term_id_transfer_post
  # Triggers a transfer for a term in ticket
  # @param ticket_id The ID of the ticket
  # @param term_id The ID of the term
  # @param [Hash] opts the optional parameters
  # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
  # @return [nil]
  describe 'transfer_tickets_ticket_id_term_id_transfer_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for tx_hash_tx_hash_set_confirmation_threshold_post
  # Overrides the required number of confirmations for a transaction completion by its TxHash
  # @param tx_hash The TxHash
  # @param [Hash] opts the optional parameters
  # @option opts [SetConfirmationsThresholdRequest] :set_confirmations_threshold_request 
  # @return [SetConfirmationsThresholdResponse]
  describe 'tx_hash_tx_hash_set_confirmation_threshold_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_get
  # Returns a list of users
  # @param [Hash] opts the optional parameters
  # @return [GetUsersResponse]
  describe 'users_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for vault_accounts_get
  # Retrieves all vault accounts for the specified filter.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :name_prefix 
  # @option opts [String] :name_suffix 
  # @option opts [String] :min_amount_threshold 
  # @option opts [String] :asset_id 
  # @return [Array<VaultAccount>]
  describe 'vault_accounts_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for vault_accounts_post
  # Creates a new vault account
  # @param unknown_base_type 
  # @param [Hash] opts the optional parameters
  # @return [VaultAccount]
  describe 'vault_accounts_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for vault_accounts_vault_account_id_asset_id_activate_post
  # Activate a wallet in a Vault account
  # @param vault_account_id The ID of the vault account to return, or &#39;default&#39; for the default vault account
  # @param asset_id The ID of the asset
  # @param [Hash] opts the optional parameters
  # @return [CreateVaultAssetResponse]
  describe 'vault_accounts_vault_account_id_asset_id_activate_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for vault_accounts_vault_account_id_asset_id_addresses_address_id_create_legacy_post
  # Translates an existing segwit address to the legacy format
  # @param vault_account_id The ID of the vault account
  # @param asset_id The ID of the asset
  # @param address_id The segwit address to translate
  # @param [Hash] opts the optional parameters
  # @return [CreateAddressResponse]
  describe 'vault_accounts_vault_account_id_asset_id_addresses_address_id_create_legacy_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for vault_accounts_vault_account_id_asset_id_addresses_address_id_put
  # Update the description of an existing address within a vault wallet
  # @param vault_account_id The ID of the vault account
  # @param asset_id The ID of the asset
  # @param address_id The address for which to add a description. For XRP, use &lt;address&gt;:&lt;tag&gt;, for all other assets, use only the address
  # @param [Hash] opts the optional parameters
  # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
  # @return [nil]
  describe 'vault_accounts_vault_account_id_asset_id_addresses_address_id_put test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for vault_accounts_vault_account_id_asset_id_addresses_address_id_set_customer_ref_id_post
  # Sets a reference customer ID for AML
  # @param vault_account_id The ID of the vault account
  # @param asset_id The ID of the asset
  # @param address_id The address for which to add a description. For XRP, use &lt;address&gt;:&lt;tag&gt;, for all other assets, use only the address
  # @param unknown_base_type 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'vault_accounts_vault_account_id_asset_id_addresses_address_id_set_customer_ref_id_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for vault_accounts_vault_account_id_asset_id_addresses_get
  # Returns all addresses generated for a Vault wallet
  # @param vault_account_id The ID of the vault account to return
  # @param asset_id The ID of the asset
  # @param [Hash] opts the optional parameters
  # @return [Array<VaultWalletAddress>]
  describe 'vault_accounts_vault_account_id_asset_id_addresses_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for vault_accounts_vault_account_id_asset_id_addresses_post
  # Generate a new deposit address for a Vault wallet
  # @param vault_account_id The ID of the vault account to return
  # @param asset_id The ID of the asset
  # @param [Hash] opts the optional parameters
  # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
  # @return [CreateAddressResponse]
  describe 'vault_accounts_vault_account_id_asset_id_addresses_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for vault_accounts_vault_account_id_asset_id_change_address_index_public_key_info_get
  # Gets the public key information for vault account
  # @param vault_account_id 
  # @param asset_id 
  # @param change 
  # @param address_index 
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :compressed 
  # @return [PublicKeyInformation]
  describe 'vault_accounts_vault_account_id_asset_id_change_address_index_public_key_info_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for vault_accounts_vault_account_id_asset_id_get
  # Returns a wallet of a specific asset inside a Fireblocks Vault account
  # @param vault_account_id The ID of the vault account to return
  # @param asset_id The ID of the asset
  # @param [Hash] opts the optional parameters
  # @return [VaultAsset]
  describe 'vault_accounts_vault_account_id_asset_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for vault_accounts_vault_account_id_asset_id_lock_allocation_post
  # Allocate funds to private ledger
  # @param vault_account_id The vault account to allocate funds in
  # @param asset_id The allocation asset id
  # @param [Hash] opts the optional parameters
  # @option opts [AllocateFundsRequest] :allocate_funds_request 
  # @return [CreateTransactionResponse]
  describe 'vault_accounts_vault_account_id_asset_id_lock_allocation_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for vault_accounts_vault_account_id_asset_id_post
  # Creates a new wallet in a Vault account
  # @param vault_account_id The ID of the vault account to return, or &#39;default&#39; for the default vault account
  # @param asset_id The ID of the asset
  # @param [Hash] opts the optional parameters
  # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
  # @return [CreateVaultAssetResponse]
  describe 'vault_accounts_vault_account_id_asset_id_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for vault_accounts_vault_account_id_asset_id_release_allocation_post
  # Deallocate funds from private ledger
  # @param vault_account_id The vault account to allocate funds in
  # @param asset_id The allocation asset id
  # @param [Hash] opts the optional parameters
  # @option opts [DeallocateFundsRequest] :deallocate_funds_request 
  # @return [CreateTransactionResponse]
  describe 'vault_accounts_vault_account_id_asset_id_release_allocation_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for vault_accounts_vault_account_id_asset_id_unspent_inputs_get
  # Gets UTXO unspent inputs information
  # @param vault_account_id The ID of the vault account
  # @param asset_id The ID of the asset
  # @param [Hash] opts the optional parameters
  # @return [Array<UnspentInputsData>]
  describe 'vault_accounts_vault_account_id_asset_id_unspent_inputs_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for vault_accounts_vault_account_id_get
  # Returns a Fireblock Vault account by ID
  # @param vault_account_id The ID of the vault account to return type: string
  # @param [Hash] opts the optional parameters
  # @return [VaultAccount]
  describe 'vault_accounts_vault_account_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for vault_accounts_vault_account_id_hide_post
  # Hides a vault account on Fireblocks console
  # @param vault_account_id The vault account to hide
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'vault_accounts_vault_account_id_hide_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for vault_accounts_vault_account_id_put
  # Edit a Fireblock Vault account
  # @param vault_account_id The ID of the vault account to edit
  # @param unknown_base_type 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'vault_accounts_vault_account_id_put test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for vault_accounts_vault_account_id_set_auto_fuel_post
  # Sets the autoFuel property of the vault account to true or false
  # @param vault_account_id The vault account ID
  # @param unknown_base_type 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'vault_accounts_vault_account_id_set_auto_fuel_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for vault_accounts_vault_account_id_set_customer_ref_id_post
  # Sets a reference customer ID for AML
  # @param vault_account_id The vault account ID
  # @param unknown_base_type 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'vault_accounts_vault_account_id_set_customer_ref_id_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for vault_accounts_vault_account_id_unhide_post
  # Reveals a hidden vault account on Fireblocks console
  # @param vault_account_id The vault account to unhide
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'vault_accounts_vault_account_id_unhide_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for vault_assets_asset_id_get
  # Gets vault balance summary by asset.
  # @param asset_id 
  # @param [Hash] opts the optional parameters
  # @return [VaultAsset]
  describe 'vault_assets_asset_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for vault_assets_get
  # Gets the assets amount summary for all \\ filtered accounts.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :account_name_prefix 
  # @option opts [String] :account_name_suffix 
  # @return [Array<VaultAsset>]
  describe 'vault_assets_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for vault_public_key_info_get
  # Gets the public key information based on derivationPath and signing algorithm
  # @param derivation_path 
  # @param algorithm 
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :compressed 
  # @return [PublicKeyInformation]
  describe 'vault_public_key_info_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for webhooks_resend_post
  # Resend failed webhooks
  # @param [Hash] opts the optional parameters
  # @return [ResendWebhooksResponse]
  describe 'webhooks_resend_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for webhooks_resend_tx_id_post
  # Resend failed webhooks for transaction by ID
  # @param tx_id The ID of the transaction for webhooks
  # @param unknown_base_type 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'webhooks_resend_tx_id_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
