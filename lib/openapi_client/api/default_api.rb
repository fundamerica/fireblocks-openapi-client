=begin
#Fireblocks API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.5.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.3.0

=end

require 'cgi'

module OpenapiClient
  class DefaultApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Estimates the required fee for a given asset. For UTXO based assets, the response will contain the suggested fee per byte, for ETH/ETC based assets, the suggested gas price, and for XRP/XLM, the transaction fee
    # @param asset_id [String] The asset for which to estimate the fee
    # @param [Hash] opts the optional parameters
    # @return [EstimatedNetworkFeeResponse]
    def estimate_network_fee_get(asset_id, opts = {})
      data, _status_code, _headers = estimate_network_fee_get_with_http_info(asset_id, opts)
      data
    end

    # Estimates the required fee for a given asset. For UTXO based assets, the response will contain the suggested fee per byte, for ETH/ETC based assets, the suggested gas price, and for XRP/XLM, the transaction fee
    # @param asset_id [String] The asset for which to estimate the fee
    # @param [Hash] opts the optional parameters
    # @return [Array<(EstimatedNetworkFeeResponse, Integer, Hash)>] EstimatedNetworkFeeResponse data, response status code and response headers
    def estimate_network_fee_get_with_http_info(asset_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.estimate_network_fee_get ...'
      end
      # verify the required parameter 'asset_id' is set
      if @api_client.config.client_side_validation && asset_id.nil?
        fail ArgumentError, "Missing the required parameter 'asset_id' when calling DefaultApi.estimate_network_fee_get"
      end
      # resource path
      local_var_path = '/estimate_network_fee'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'assetId'] = asset_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EstimatedNetworkFeeResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth', 'bearerTokenAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.estimate_network_fee_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#estimate_network_fee_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a single asset within an exchange account
    # @param exchange_account_id [String] The ID of the exchange account to return
    # @param asset_id [String] The ID of the asset to return
    # @param [Hash] opts the optional parameters
    # @return [ExchangeAsset]
    def exchange_accounts_exchange_account_id_asset_id_get(exchange_account_id, asset_id, opts = {})
      data, _status_code, _headers = exchange_accounts_exchange_account_id_asset_id_get_with_http_info(exchange_account_id, asset_id, opts)
      data
    end

    # Returns a single asset within an exchange account
    # @param exchange_account_id [String] The ID of the exchange account to return
    # @param asset_id [String] The ID of the asset to return
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExchangeAsset, Integer, Hash)>] ExchangeAsset data, response status code and response headers
    def exchange_accounts_exchange_account_id_asset_id_get_with_http_info(exchange_account_id, asset_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.exchange_accounts_exchange_account_id_asset_id_get ...'
      end
      # verify the required parameter 'exchange_account_id' is set
      if @api_client.config.client_side_validation && exchange_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'exchange_account_id' when calling DefaultApi.exchange_accounts_exchange_account_id_asset_id_get"
      end
      # verify the required parameter 'asset_id' is set
      if @api_client.config.client_side_validation && asset_id.nil?
        fail ArgumentError, "Missing the required parameter 'asset_id' when calling DefaultApi.exchange_accounts_exchange_account_id_asset_id_get"
      end
      # resource path
      local_var_path = '/exchange_accounts/{exchangeAccountId}/{assetId}'.sub('{' + 'exchangeAccountId' + '}', CGI.escape(exchange_account_id.to_s)).sub('{' + 'assetId' + '}', CGI.escape(asset_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ExchangeAsset'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth', 'bearerTokenAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.exchange_accounts_exchange_account_id_asset_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#exchange_accounts_exchange_account_id_asset_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns an exchange account by ID
    # @param exchange_account_id [String] The ID of the exchange account to return
    # @param [Hash] opts the optional parameters
    # @return [ExchangeAccount]
    def exchange_accounts_exchange_account_id_get(exchange_account_id, opts = {})
      data, _status_code, _headers = exchange_accounts_exchange_account_id_get_with_http_info(exchange_account_id, opts)
      data
    end

    # Returns an exchange account by ID
    # @param exchange_account_id [String] The ID of the exchange account to return
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExchangeAccount, Integer, Hash)>] ExchangeAccount data, response status code and response headers
    def exchange_accounts_exchange_account_id_get_with_http_info(exchange_account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.exchange_accounts_exchange_account_id_get ...'
      end
      # verify the required parameter 'exchange_account_id' is set
      if @api_client.config.client_side_validation && exchange_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'exchange_account_id' when calling DefaultApi.exchange_accounts_exchange_account_id_get"
      end
      # resource path
      local_var_path = '/exchange_accounts/{exchangeAccountId}'.sub('{' + 'exchangeAccountId' + '}', CGI.escape(exchange_account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ExchangeAccount'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth', 'bearerTokenAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.exchange_accounts_exchange_account_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#exchange_accounts_exchange_account_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Transfers funds between trading accounts under the same exchange account
    # @param exchange_account_id [String] The ID of the exchange account to return
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def exchange_accounts_exchange_account_id_internal_transfer_post(exchange_account_id, opts = {})
      exchange_accounts_exchange_account_id_internal_transfer_post_with_http_info(exchange_account_id, opts)
      nil
    end

    # Transfers funds between trading accounts under the same exchange account
    # @param exchange_account_id [String] The ID of the exchange account to return
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def exchange_accounts_exchange_account_id_internal_transfer_post_with_http_info(exchange_account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.exchange_accounts_exchange_account_id_internal_transfer_post ...'
      end
      # verify the required parameter 'exchange_account_id' is set
      if @api_client.config.client_side_validation && exchange_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'exchange_account_id' when calling DefaultApi.exchange_accounts_exchange_account_id_internal_transfer_post"
      end
      # resource path
      local_var_path = '/exchange_accounts/{exchangeAccountId}/internal_transfer'.sub('{' + 'exchangeAccountId' + '}', CGI.escape(exchange_account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'unknown_base_type'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth', 'bearerTokenAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.exchange_accounts_exchange_account_id_internal_transfer_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#exchange_accounts_exchange_account_id_internal_transfer_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns all exchange accounts
    # @param [Hash] opts the optional parameters
    # @return [Array<ExchangeAccount>]
    def exchange_accounts_get(opts = {})
      data, _status_code, _headers = exchange_accounts_get_with_http_info(opts)
      data
    end

    # Returns all exchange accounts
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ExchangeAccount>, Integer, Hash)>] Array<ExchangeAccount> data, response status code and response headers
    def exchange_accounts_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.exchange_accounts_get ...'
      end
      # resource path
      local_var_path = '/exchange_accounts'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<ExchangeAccount>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth', 'bearerTokenAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.exchange_accounts_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#exchange_accounts_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets a list of external wallets under the tenant
    # @param [Hash] opts the optional parameters
    # @return [Array<UnmanagedWallet>]
    def external_wallets_get(opts = {})
      data, _status_code, _headers = external_wallets_get_with_http_info(opts)
      data
    end

    # Gets a list of external wallets under the tenant
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<UnmanagedWallet>, Integer, Hash)>] Array<UnmanagedWallet> data, response status code and response headers
    def external_wallets_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.external_wallets_get ...'
      end
      # resource path
      local_var_path = '/external_wallets'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<UnmanagedWallet>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth', 'bearerTokenAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.external_wallets_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#external_wallets_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a new external wallet
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [UnmanagedWallet]
    def external_wallets_post(opts = {})
      data, _status_code, _headers = external_wallets_post_with_http_info(opts)
      data
    end

    # Creates a new external wallet
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(UnmanagedWallet, Integer, Hash)>] UnmanagedWallet data, response status code and response headers
    def external_wallets_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.external_wallets_post ...'
      end
      # resource path
      local_var_path = '/external_wallets'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*', 'application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'unknown_base_type'])

      # return_type
      return_type = opts[:debug_return_type] || 'UnmanagedWallet'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth', 'bearerTokenAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.external_wallets_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#external_wallets_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes an external wallet asset by ID
    # @param wallet_id [String] The ID of the wallet
    # @param asset_id [String] The ID of the asset to delete
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def external_wallets_wallet_id_asset_id_delete(wallet_id, asset_id, opts = {})
      external_wallets_wallet_id_asset_id_delete_with_http_info(wallet_id, asset_id, opts)
      nil
    end

    # Deletes an external wallet asset by ID
    # @param wallet_id [String] The ID of the wallet
    # @param asset_id [String] The ID of the asset to delete
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def external_wallets_wallet_id_asset_id_delete_with_http_info(wallet_id, asset_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.external_wallets_wallet_id_asset_id_delete ...'
      end
      # verify the required parameter 'wallet_id' is set
      if @api_client.config.client_side_validation && wallet_id.nil?
        fail ArgumentError, "Missing the required parameter 'wallet_id' when calling DefaultApi.external_wallets_wallet_id_asset_id_delete"
      end
      # verify the required parameter 'asset_id' is set
      if @api_client.config.client_side_validation && asset_id.nil?
        fail ArgumentError, "Missing the required parameter 'asset_id' when calling DefaultApi.external_wallets_wallet_id_asset_id_delete"
      end
      # resource path
      local_var_path = '/external_wallets/{walletId}/{assetId}'.sub('{' + 'walletId' + '}', CGI.escape(wallet_id.to_s)).sub('{' + 'assetId' + '}', CGI.escape(asset_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth', 'bearerTokenAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.external_wallets_wallet_id_asset_id_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#external_wallets_wallet_id_asset_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns an external wallet asset by ID
    # @param wallet_id [String] The ID of the wallet
    # @param asset_id [String] The ID of the asset to return
    # @param [Hash] opts the optional parameters
    # @return [ExternalWalletAsset]
    def external_wallets_wallet_id_asset_id_get(wallet_id, asset_id, opts = {})
      data, _status_code, _headers = external_wallets_wallet_id_asset_id_get_with_http_info(wallet_id, asset_id, opts)
      data
    end

    # Returns an external wallet asset by ID
    # @param wallet_id [String] The ID of the wallet
    # @param asset_id [String] The ID of the asset to return
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExternalWalletAsset, Integer, Hash)>] ExternalWalletAsset data, response status code and response headers
    def external_wallets_wallet_id_asset_id_get_with_http_info(wallet_id, asset_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.external_wallets_wallet_id_asset_id_get ...'
      end
      # verify the required parameter 'wallet_id' is set
      if @api_client.config.client_side_validation && wallet_id.nil?
        fail ArgumentError, "Missing the required parameter 'wallet_id' when calling DefaultApi.external_wallets_wallet_id_asset_id_get"
      end
      # verify the required parameter 'asset_id' is set
      if @api_client.config.client_side_validation && asset_id.nil?
        fail ArgumentError, "Missing the required parameter 'asset_id' when calling DefaultApi.external_wallets_wallet_id_asset_id_get"
      end
      # resource path
      local_var_path = '/external_wallets/{walletId}/{assetId}'.sub('{' + 'walletId' + '}', CGI.escape(wallet_id.to_s)).sub('{' + 'assetId' + '}', CGI.escape(asset_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ExternalWalletAsset'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth', 'bearerTokenAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.external_wallets_wallet_id_asset_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#external_wallets_wallet_id_asset_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Adds an asset to an existing external wallet
    # @param wallet_id [String] The ID of the wallet
    # @param asset_id [String] The ID of the asset to add
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [ExternalWalletAsset]
    def external_wallets_wallet_id_asset_id_post(wallet_id, asset_id, opts = {})
      data, _status_code, _headers = external_wallets_wallet_id_asset_id_post_with_http_info(wallet_id, asset_id, opts)
      data
    end

    # Adds an asset to an existing external wallet
    # @param wallet_id [String] The ID of the wallet
    # @param asset_id [String] The ID of the asset to add
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(ExternalWalletAsset, Integer, Hash)>] ExternalWalletAsset data, response status code and response headers
    def external_wallets_wallet_id_asset_id_post_with_http_info(wallet_id, asset_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.external_wallets_wallet_id_asset_id_post ...'
      end
      # verify the required parameter 'wallet_id' is set
      if @api_client.config.client_side_validation && wallet_id.nil?
        fail ArgumentError, "Missing the required parameter 'wallet_id' when calling DefaultApi.external_wallets_wallet_id_asset_id_post"
      end
      # verify the required parameter 'asset_id' is set
      if @api_client.config.client_side_validation && asset_id.nil?
        fail ArgumentError, "Missing the required parameter 'asset_id' when calling DefaultApi.external_wallets_wallet_id_asset_id_post"
      end
      # resource path
      local_var_path = '/external_wallets/{walletId}/{assetId}'.sub('{' + 'walletId' + '}', CGI.escape(wallet_id.to_s)).sub('{' + 'assetId' + '}', CGI.escape(asset_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*', 'application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'unknown_base_type'])

      # return_type
      return_type = opts[:debug_return_type] || 'ExternalWalletAsset'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth', 'bearerTokenAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.external_wallets_wallet_id_asset_id_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#external_wallets_wallet_id_asset_id_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes an external wallet by ID
    # @param wallet_id [String] The ID of the wallet to delete
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def external_wallets_wallet_id_delete(wallet_id, opts = {})
      external_wallets_wallet_id_delete_with_http_info(wallet_id, opts)
      nil
    end

    # Deletes an external wallet by ID
    # @param wallet_id [String] The ID of the wallet to delete
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def external_wallets_wallet_id_delete_with_http_info(wallet_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.external_wallets_wallet_id_delete ...'
      end
      # verify the required parameter 'wallet_id' is set
      if @api_client.config.client_side_validation && wallet_id.nil?
        fail ArgumentError, "Missing the required parameter 'wallet_id' when calling DefaultApi.external_wallets_wallet_id_delete"
      end
      # resource path
      local_var_path = '/external_wallets/{walletId}'.sub('{' + 'walletId' + '}', CGI.escape(wallet_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth', 'bearerTokenAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.external_wallets_wallet_id_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#external_wallets_wallet_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns an external wallet by ID
    # @param wallet_id [String] The ID of the wallet to return
    # @param [Hash] opts the optional parameters
    # @return [UnmanagedWallet]
    def external_wallets_wallet_id_get(wallet_id, opts = {})
      data, _status_code, _headers = external_wallets_wallet_id_get_with_http_info(wallet_id, opts)
      data
    end

    # Returns an external wallet by ID
    # @param wallet_id [String] The ID of the wallet to return
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnmanagedWallet, Integer, Hash)>] UnmanagedWallet data, response status code and response headers
    def external_wallets_wallet_id_get_with_http_info(wallet_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.external_wallets_wallet_id_get ...'
      end
      # verify the required parameter 'wallet_id' is set
      if @api_client.config.client_side_validation && wallet_id.nil?
        fail ArgumentError, "Missing the required parameter 'wallet_id' when calling DefaultApi.external_wallets_wallet_id_get"
      end
      # resource path
      local_var_path = '/external_wallets/{walletId}'.sub('{' + 'walletId' + '}', CGI.escape(wallet_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UnmanagedWallet'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth', 'bearerTokenAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.external_wallets_wallet_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#external_wallets_wallet_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Sets a reference customer ID for AML
    # @param wallet_id [String] The wallet ID
    # @param unknown_base_type [UNKNOWN_BASE_TYPE] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def external_wallets_wallet_id_set_customer_ref_id_post(wallet_id, unknown_base_type, opts = {})
      external_wallets_wallet_id_set_customer_ref_id_post_with_http_info(wallet_id, unknown_base_type, opts)
      nil
    end

    # Sets a reference customer ID for AML
    # @param wallet_id [String] The wallet ID
    # @param unknown_base_type [UNKNOWN_BASE_TYPE] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def external_wallets_wallet_id_set_customer_ref_id_post_with_http_info(wallet_id, unknown_base_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.external_wallets_wallet_id_set_customer_ref_id_post ...'
      end
      # verify the required parameter 'wallet_id' is set
      if @api_client.config.client_side_validation && wallet_id.nil?
        fail ArgumentError, "Missing the required parameter 'wallet_id' when calling DefaultApi.external_wallets_wallet_id_set_customer_ref_id_post"
      end
      # resource path
      local_var_path = '/external_wallets/{walletId}/set_customer_ref_id'.sub('{' + 'walletId' + '}', CGI.escape(wallet_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(unknown_base_type)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth', 'bearerTokenAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.external_wallets_wallet_id_set_customer_ref_id_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#external_wallets_wallet_id_set_customer_ref_id_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deposit funds from DDA
    # @param account_id [String] The ID of the fiat account to use
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def fiat_accounts_account_id_deposit_from_linked_dda_post(account_id, opts = {})
      fiat_accounts_account_id_deposit_from_linked_dda_post_with_http_info(account_id, opts)
      nil
    end

    # Deposit funds from DDA
    # @param account_id [String] The ID of the fiat account to use
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def fiat_accounts_account_id_deposit_from_linked_dda_post_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.fiat_accounts_account_id_deposit_from_linked_dda_post ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling DefaultApi.fiat_accounts_account_id_deposit_from_linked_dda_post"
      end
      # resource path
      local_var_path = '/fiat_accounts/{accountId}/deposit_from_linked_dda'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'unknown_base_type'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth', 'bearerTokenAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.fiat_accounts_account_id_deposit_from_linked_dda_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#fiat_accounts_account_id_deposit_from_linked_dda_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a fiat account by ID
    # @param account_id [String] The ID of the fiat account to return
    # @param [Hash] opts the optional parameters
    # @return [FiatAccount]
    def fiat_accounts_account_id_get(account_id, opts = {})
      data, _status_code, _headers = fiat_accounts_account_id_get_with_http_info(account_id, opts)
      data
    end

    # Returns a fiat account by ID
    # @param account_id [String] The ID of the fiat account to return
    # @param [Hash] opts the optional parameters
    # @return [Array<(FiatAccount, Integer, Hash)>] FiatAccount data, response status code and response headers
    def fiat_accounts_account_id_get_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.fiat_accounts_account_id_get ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling DefaultApi.fiat_accounts_account_id_get"
      end
      # resource path
      local_var_path = '/fiat_accounts/{accountId}'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FiatAccount'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth', 'bearerTokenAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.fiat_accounts_account_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#fiat_accounts_account_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Redeem funds to DDA
    # @param account_id [String] The ID of the fiat account to use
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def fiat_accounts_account_id_redeem_to_linked_dda_post(account_id, opts = {})
      fiat_accounts_account_id_redeem_to_linked_dda_post_with_http_info(account_id, opts)
      nil
    end

    # Redeem funds to DDA
    # @param account_id [String] The ID of the fiat account to use
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def fiat_accounts_account_id_redeem_to_linked_dda_post_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.fiat_accounts_account_id_redeem_to_linked_dda_post ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling DefaultApi.fiat_accounts_account_id_redeem_to_linked_dda_post"
      end
      # resource path
      local_var_path = '/fiat_accounts/{accountId}/redeem_to_linked_dda'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'unknown_base_type'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth', 'bearerTokenAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.fiat_accounts_account_id_redeem_to_linked_dda_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#fiat_accounts_account_id_redeem_to_linked_dda_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns all fiat accounts
    # @param [Hash] opts the optional parameters
    # @return [Array<FiatAccount>]
    def fiat_accounts_get(opts = {})
      data, _status_code, _headers = fiat_accounts_get_with_http_info(opts)
      data
    end

    # Returns all fiat accounts
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<FiatAccount>, Integer, Hash)>] Array<FiatAccount> data, response status code and response headers
    def fiat_accounts_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.fiat_accounts_get ...'
      end
      # resource path
      local_var_path = '/fiat_accounts'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<FiatAccount>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth', 'bearerTokenAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.fiat_accounts_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#fiat_accounts_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Sets Gas Station configuration
    # @param gas_station_configuration [GasStationConfiguration] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def gas_station_configuration_put(gas_station_configuration, opts = {})
      gas_station_configuration_put_with_http_info(gas_station_configuration, opts)
      nil
    end

    # Sets Gas Station configuration
    # @param gas_station_configuration [GasStationConfiguration] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def gas_station_configuration_put_with_http_info(gas_station_configuration, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.gas_station_configuration_put ...'
      end
      # verify the required parameter 'gas_station_configuration' is set
      if @api_client.config.client_side_validation && gas_station_configuration.nil?
        fail ArgumentError, "Missing the required parameter 'gas_station_configuration' when calling DefaultApi.gas_station_configuration_put"
      end
      # resource path
      local_var_path = '/gas_station/configuration'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(gas_station_configuration)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth', 'bearerTokenAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.gas_station_configuration_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#gas_station_configuration_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a summary of Gas Station configuration and balances
    # @param [Hash] opts the optional parameters
    # @return [GasStationPropertiesResponse]
    def gas_station_get(opts = {})
      data, _status_code, _headers = gas_station_get_with_http_info(opts)
      data
    end

    # Returns a summary of Gas Station configuration and balances
    # @param [Hash] opts the optional parameters
    # @return [Array<(GasStationPropertiesResponse, Integer, Hash)>] GasStationPropertiesResponse data, response status code and response headers
    def gas_station_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.gas_station_get ...'
      end
      # resource path
      local_var_path = '/gas_station'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GasStationPropertiesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth', 'bearerTokenAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.gas_station_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#gas_station_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets a list of internal wallets
    # @param [Hash] opts the optional parameters
    # @return [Array<UnmanagedWallet>]
    def internal_wallets_get(opts = {})
      data, _status_code, _headers = internal_wallets_get_with_http_info(opts)
      data
    end

    # Gets a list of internal wallets
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<UnmanagedWallet>, Integer, Hash)>] Array<UnmanagedWallet> data, response status code and response headers
    def internal_wallets_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.internal_wallets_get ...'
      end
      # resource path
      local_var_path = '/internal_wallets'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<UnmanagedWallet>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth', 'bearerTokenAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.internal_wallets_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#internal_wallets_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a new internal wallet
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [UnmanagedWallet]
    def internal_wallets_post(opts = {})
      data, _status_code, _headers = internal_wallets_post_with_http_info(opts)
      data
    end

    # Creates a new internal wallet
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(UnmanagedWallet, Integer, Hash)>] UnmanagedWallet data, response status code and response headers
    def internal_wallets_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.internal_wallets_post ...'
      end
      # resource path
      local_var_path = '/internal_wallets'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*', 'application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'unknown_base_type'])

      # return_type
      return_type = opts[:debug_return_type] || 'UnmanagedWallet'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth', 'bearerTokenAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.internal_wallets_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#internal_wallets_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes an internal wallet asset by ID
    # @param wallet_id [String] The ID of the wallet
    # @param asset_id [String] The ID of the asset to delete
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def internal_wallets_wallet_id_asset_id_delete(wallet_id, asset_id, opts = {})
      internal_wallets_wallet_id_asset_id_delete_with_http_info(wallet_id, asset_id, opts)
      nil
    end

    # Deletes an internal wallet asset by ID
    # @param wallet_id [String] The ID of the wallet
    # @param asset_id [String] The ID of the asset to delete
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def internal_wallets_wallet_id_asset_id_delete_with_http_info(wallet_id, asset_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.internal_wallets_wallet_id_asset_id_delete ...'
      end
      # verify the required parameter 'wallet_id' is set
      if @api_client.config.client_side_validation && wallet_id.nil?
        fail ArgumentError, "Missing the required parameter 'wallet_id' when calling DefaultApi.internal_wallets_wallet_id_asset_id_delete"
      end
      # verify the required parameter 'asset_id' is set
      if @api_client.config.client_side_validation && asset_id.nil?
        fail ArgumentError, "Missing the required parameter 'asset_id' when calling DefaultApi.internal_wallets_wallet_id_asset_id_delete"
      end
      # resource path
      local_var_path = '/internal_wallets/{walletId}/{assetId}'.sub('{' + 'walletId' + '}', CGI.escape(wallet_id.to_s)).sub('{' + 'assetId' + '}', CGI.escape(asset_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth', 'bearerTokenAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.internal_wallets_wallet_id_asset_id_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#internal_wallets_wallet_id_asset_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns an internal wallet asset by ID
    # @param wallet_id [String] The ID of the wallet
    # @param asset_id [String] The ID of the asset to return
    # @param [Hash] opts the optional parameters
    # @return [WalletAsset]
    def internal_wallets_wallet_id_asset_id_get(wallet_id, asset_id, opts = {})
      data, _status_code, _headers = internal_wallets_wallet_id_asset_id_get_with_http_info(wallet_id, asset_id, opts)
      data
    end

    # Returns an internal wallet asset by ID
    # @param wallet_id [String] The ID of the wallet
    # @param asset_id [String] The ID of the asset to return
    # @param [Hash] opts the optional parameters
    # @return [Array<(WalletAsset, Integer, Hash)>] WalletAsset data, response status code and response headers
    def internal_wallets_wallet_id_asset_id_get_with_http_info(wallet_id, asset_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.internal_wallets_wallet_id_asset_id_get ...'
      end
      # verify the required parameter 'wallet_id' is set
      if @api_client.config.client_side_validation && wallet_id.nil?
        fail ArgumentError, "Missing the required parameter 'wallet_id' when calling DefaultApi.internal_wallets_wallet_id_asset_id_get"
      end
      # verify the required parameter 'asset_id' is set
      if @api_client.config.client_side_validation && asset_id.nil?
        fail ArgumentError, "Missing the required parameter 'asset_id' when calling DefaultApi.internal_wallets_wallet_id_asset_id_get"
      end
      # resource path
      local_var_path = '/internal_wallets/{walletId}/{assetId}'.sub('{' + 'walletId' + '}', CGI.escape(wallet_id.to_s)).sub('{' + 'assetId' + '}', CGI.escape(asset_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'WalletAsset'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth', 'bearerTokenAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.internal_wallets_wallet_id_asset_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#internal_wallets_wallet_id_asset_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create asset to an existing internal wallet
    # @param wallet_id [String] The ID of the wallet
    # @param asset_id [String] The ID of the asset to add
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [WalletAsset]
    def internal_wallets_wallet_id_asset_id_post(wallet_id, asset_id, opts = {})
      data, _status_code, _headers = internal_wallets_wallet_id_asset_id_post_with_http_info(wallet_id, asset_id, opts)
      data
    end

    # Create asset to an existing internal wallet
    # @param wallet_id [String] The ID of the wallet
    # @param asset_id [String] The ID of the asset to add
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(WalletAsset, Integer, Hash)>] WalletAsset data, response status code and response headers
    def internal_wallets_wallet_id_asset_id_post_with_http_info(wallet_id, asset_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.internal_wallets_wallet_id_asset_id_post ...'
      end
      # verify the required parameter 'wallet_id' is set
      if @api_client.config.client_side_validation && wallet_id.nil?
        fail ArgumentError, "Missing the required parameter 'wallet_id' when calling DefaultApi.internal_wallets_wallet_id_asset_id_post"
      end
      # verify the required parameter 'asset_id' is set
      if @api_client.config.client_side_validation && asset_id.nil?
        fail ArgumentError, "Missing the required parameter 'asset_id' when calling DefaultApi.internal_wallets_wallet_id_asset_id_post"
      end
      # resource path
      local_var_path = '/internal_wallets/{walletId}/{assetId}'.sub('{' + 'walletId' + '}', CGI.escape(wallet_id.to_s)).sub('{' + 'assetId' + '}', CGI.escape(asset_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*', 'application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'unknown_base_type'])

      # return_type
      return_type = opts[:debug_return_type] || 'WalletAsset'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth', 'bearerTokenAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.internal_wallets_wallet_id_asset_id_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#internal_wallets_wallet_id_asset_id_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes an internal wallet by ID
    # @param wallet_id [String] The ID of the wallet to delete
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def internal_wallets_wallet_id_delete(wallet_id, opts = {})
      internal_wallets_wallet_id_delete_with_http_info(wallet_id, opts)
      nil
    end

    # Deletes an internal wallet by ID
    # @param wallet_id [String] The ID of the wallet to delete
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def internal_wallets_wallet_id_delete_with_http_info(wallet_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.internal_wallets_wallet_id_delete ...'
      end
      # verify the required parameter 'wallet_id' is set
      if @api_client.config.client_side_validation && wallet_id.nil?
        fail ArgumentError, "Missing the required parameter 'wallet_id' when calling DefaultApi.internal_wallets_wallet_id_delete"
      end
      # resource path
      local_var_path = '/internal_wallets/{walletId}'.sub('{' + 'walletId' + '}', CGI.escape(wallet_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth', 'bearerTokenAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.internal_wallets_wallet_id_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#internal_wallets_wallet_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns an internal wallet by ID
    # @param wallet_id [String] The ID of the wallet to return
    # @param [Hash] opts the optional parameters
    # @return [UnmanagedWallet]
    def internal_wallets_wallet_id_get(wallet_id, opts = {})
      data, _status_code, _headers = internal_wallets_wallet_id_get_with_http_info(wallet_id, opts)
      data
    end

    # Returns an internal wallet by ID
    # @param wallet_id [String] The ID of the wallet to return
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnmanagedWallet, Integer, Hash)>] UnmanagedWallet data, response status code and response headers
    def internal_wallets_wallet_id_get_with_http_info(wallet_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.internal_wallets_wallet_id_get ...'
      end
      # verify the required parameter 'wallet_id' is set
      if @api_client.config.client_side_validation && wallet_id.nil?
        fail ArgumentError, "Missing the required parameter 'wallet_id' when calling DefaultApi.internal_wallets_wallet_id_get"
      end
      # resource path
      local_var_path = '/internal_wallets/{walletId}'.sub('{' + 'walletId' + '}', CGI.escape(wallet_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UnmanagedWallet'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth', 'bearerTokenAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.internal_wallets_wallet_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#internal_wallets_wallet_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Sets a reference customer ID for AML
    # @param wallet_id [String] The wallet ID
    # @param unknown_base_type [UNKNOWN_BASE_TYPE] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def internal_wallets_wallet_id_set_customer_ref_id_post(wallet_id, unknown_base_type, opts = {})
      internal_wallets_wallet_id_set_customer_ref_id_post_with_http_info(wallet_id, unknown_base_type, opts)
      nil
    end

    # Sets a reference customer ID for AML
    # @param wallet_id [String] The wallet ID
    # @param unknown_base_type [UNKNOWN_BASE_TYPE] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def internal_wallets_wallet_id_set_customer_ref_id_post_with_http_info(wallet_id, unknown_base_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.internal_wallets_wallet_id_set_customer_ref_id_post ...'
      end
      # verify the required parameter 'wallet_id' is set
      if @api_client.config.client_side_validation && wallet_id.nil?
        fail ArgumentError, "Missing the required parameter 'wallet_id' when calling DefaultApi.internal_wallets_wallet_id_set_customer_ref_id_post"
      end
      # resource path
      local_var_path = '/internal_wallets/{walletId}/set_customer_ref_id'.sub('{' + 'walletId' + '}', CGI.escape(wallet_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(unknown_base_type)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth', 'bearerTokenAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.internal_wallets_wallet_id_set_customer_ref_id_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#internal_wallets_wallet_id_set_customer_ref_id_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets a network connection by ID
    # @param connection_id [String] The ID of the connection
    # @param [Hash] opts the optional parameters
    # @return [NetworkConnectionResponse]
    def network_connections_connection_id_get(connection_id, opts = {})
      data, _status_code, _headers = network_connections_connection_id_get_with_http_info(connection_id, opts)
      data
    end

    # Gets a network connection by ID
    # @param connection_id [String] The ID of the connection
    # @param [Hash] opts the optional parameters
    # @return [Array<(NetworkConnectionResponse, Integer, Hash)>] NetworkConnectionResponse data, response status code and response headers
    def network_connections_connection_id_get_with_http_info(connection_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.network_connections_connection_id_get ...'
      end
      # verify the required parameter 'connection_id' is set
      if @api_client.config.client_side_validation && connection_id.nil?
        fail ArgumentError, "Missing the required parameter 'connection_id' when calling DefaultApi.network_connections_connection_id_get"
      end
      # resource path
      local_var_path = '/network_connections/{connectionId}'.sub('{' + 'connectionId' + '}', CGI.escape(connection_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'NetworkConnectionResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth', 'bearerTokenAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.network_connections_connection_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#network_connections_connection_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns all network connections
    # @param [Hash] opts the optional parameters
    # @return [Array<NetworkConnectionResponse>]
    def network_connections_get(opts = {})
      data, _status_code, _headers = network_connections_get_with_http_info(opts)
      data
    end

    # Returns all network connections
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<NetworkConnectionResponse>, Integer, Hash)>] Array<NetworkConnectionResponse> data, response status code and response headers
    def network_connections_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.network_connections_get ...'
      end
      # resource path
      local_var_path = '/network_connections'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<NetworkConnectionResponse>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth', 'bearerTokenAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.network_connections_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#network_connections_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get off exchanges
    # @param [Hash] opts the optional parameters
    # @return [Array<OffExchangeEntityResponse>]
    def off_exchange_accounts_get(opts = {})
      data, _status_code, _headers = off_exchange_accounts_get_with_http_info(opts)
      data
    end

    # Get off exchanges
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<OffExchangeEntityResponse>, Integer, Hash)>] Array<OffExchangeEntityResponse> data, response status code and response headers
    def off_exchange_accounts_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.off_exchange_accounts_get ...'
      end
      # resource path
      local_var_path = '/off_exchange_accounts'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<OffExchangeEntityResponse>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth', 'bearerTokenAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.off_exchange_accounts_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#off_exchange_accounts_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get off exchange by it's ID
    # @param virtual_account_id [String] The ID of the off exchange entity
    # @param [Hash] opts the optional parameters
    # @return [OffExchangeEntityResponse]
    def off_exchange_accounts_virtual_account_id_get(virtual_account_id, opts = {})
      data, _status_code, _headers = off_exchange_accounts_virtual_account_id_get_with_http_info(virtual_account_id, opts)
      data
    end

    # Get off exchange by it&#39;s ID
    # @param virtual_account_id [String] The ID of the off exchange entity
    # @param [Hash] opts the optional parameters
    # @return [Array<(OffExchangeEntityResponse, Integer, Hash)>] OffExchangeEntityResponse data, response status code and response headers
    def off_exchange_accounts_virtual_account_id_get_with_http_info(virtual_account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.off_exchange_accounts_virtual_account_id_get ...'
      end
      # verify the required parameter 'virtual_account_id' is set
      if @api_client.config.client_side_validation && virtual_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'virtual_account_id' when calling DefaultApi.off_exchange_accounts_virtual_account_id_get"
      end
      # resource path
      local_var_path = '/off_exchange_accounts/{virtualAccountId}'.sub('{' + 'virtualAccountId' + '}', CGI.escape(virtual_account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OffExchangeEntityResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth', 'bearerTokenAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.off_exchange_accounts_virtual_account_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#off_exchange_accounts_virtual_account_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Settle an off exchange entity
    # @param virtual_account_id [String] The ID of the off exchange entity
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def off_exchange_accounts_virtual_account_id_settle_post(virtual_account_id, opts = {})
      off_exchange_accounts_virtual_account_id_settle_post_with_http_info(virtual_account_id, opts)
      nil
    end

    # Settle an off exchange entity
    # @param virtual_account_id [String] The ID of the off exchange entity
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def off_exchange_accounts_virtual_account_id_settle_post_with_http_info(virtual_account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.off_exchange_accounts_virtual_account_id_settle_post ...'
      end
      # verify the required parameter 'virtual_account_id' is set
      if @api_client.config.client_side_validation && virtual_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'virtual_account_id' when calling DefaultApi.off_exchange_accounts_virtual_account_id_settle_post"
      end
      # resource path
      local_var_path = '/off_exchange_accounts/{virtualAccountId}/settle'.sub('{' + 'virtualAccountId' + '}', CGI.escape(virtual_account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth', 'bearerTokenAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.off_exchange_accounts_virtual_account_id_settle_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#off_exchange_accounts_virtual_account_id_settle_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns all asset types supported by Fireblocks
    # @param [Hash] opts the optional parameters
    # @return [Array<AssetTypeResponse>]
    def supported_assets_get(opts = {})
      data, _status_code, _headers = supported_assets_get_with_http_info(opts)
      data
    end

    # Returns all asset types supported by Fireblocks
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<AssetTypeResponse>, Integer, Hash)>] Array<AssetTypeResponse> data, response status code and response headers
    def supported_assets_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.supported_assets_get ...'
      end
      # resource path
      local_var_path = '/supported_assets'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<AssetTypeResponse>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth', 'bearerTokenAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.supported_assets_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#supported_assets_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Estimates the transaction fee for a given transaction request
    # @param [Hash] opts the optional parameters
    # @option opts [TransactionRequest] :transaction_request 
    # @return [EstimatedTransactionFeeResponse]
    def transactions_estimate_fee_post(opts = {})
      data, _status_code, _headers = transactions_estimate_fee_post_with_http_info(opts)
      data
    end

    # Estimates the transaction fee for a given transaction request
    # @param [Hash] opts the optional parameters
    # @option opts [TransactionRequest] :transaction_request 
    # @return [Array<(EstimatedTransactionFeeResponse, Integer, Hash)>] EstimatedTransactionFeeResponse data, response status code and response headers
    def transactions_estimate_fee_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.transactions_estimate_fee_post ...'
      end
      # resource path
      local_var_path = '/transactions/estimate_fee'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*', 'application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'transaction_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'EstimatedTransactionFeeResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth', 'bearerTokenAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.transactions_estimate_fee_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#transactions_estimate_fee_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns transaction by external transaction ID
    # @param external_tx_id [String] The external ID of the transaction to return
    # @param [Hash] opts the optional parameters
    # @return [TransactionResponse]
    def transactions_external_tx_id_external_tx_id_get(external_tx_id, opts = {})
      data, _status_code, _headers = transactions_external_tx_id_external_tx_id_get_with_http_info(external_tx_id, opts)
      data
    end

    # Returns transaction by external transaction ID
    # @param external_tx_id [String] The external ID of the transaction to return
    # @param [Hash] opts the optional parameters
    # @return [Array<(TransactionResponse, Integer, Hash)>] TransactionResponse data, response status code and response headers
    def transactions_external_tx_id_external_tx_id_get_with_http_info(external_tx_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.transactions_external_tx_id_external_tx_id_get ...'
      end
      # verify the required parameter 'external_tx_id' is set
      if @api_client.config.client_side_validation && external_tx_id.nil?
        fail ArgumentError, "Missing the required parameter 'external_tx_id' when calling DefaultApi.transactions_external_tx_id_external_tx_id_get"
      end
      # resource path
      local_var_path = '/transactions/external_tx_id/{externalTxId}/'.sub('{' + 'externalTxId' + '}', CGI.escape(external_tx_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TransactionResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth', 'bearerTokenAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.transactions_external_tx_id_external_tx_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#transactions_external_tx_id_external_tx_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets a list of transactions under the tenant
    # @param [Hash] opts the optional parameters
    # @option opts [String] :before Unix timestamp in milliseconds. Returns only transactions created before the specified date
    # @option opts [String] :after Unix timestamp in milliseconds. Returns only transactions created after the specified date
    # @option opts [String] :status Comma-separated list of statuses. Returns only transactions with one of the specified statuses
    # @option opts [String] :order_by The field to order the results by
    # @option opts [Integer] :limit Limits the number of results. If not provided, a limit of 200 will be used. The maximum allowed limit is 500 (default to 200)
    # @option opts [String] :source_type The source type of the transaction
    # @option opts [String] :source_id The source ID of the transaction
    # @option opts [String] :dest_type The destination type of the transaction
    # @option opts [String] :dest_id The destination ID of the transaction
    # @option opts [String] :assets A list of assets to filter by, seperated by commas
    # @option opts [String] :tx_hash Returns only results with a specified txHash
    # @return [Array<TransactionResponse>]
    def transactions_get(opts = {})
      data, _status_code, _headers = transactions_get_with_http_info(opts)
      data
    end

    # Gets a list of transactions under the tenant
    # @param [Hash] opts the optional parameters
    # @option opts [String] :before Unix timestamp in milliseconds. Returns only transactions created before the specified date
    # @option opts [String] :after Unix timestamp in milliseconds. Returns only transactions created after the specified date
    # @option opts [String] :status Comma-separated list of statuses. Returns only transactions with one of the specified statuses
    # @option opts [String] :order_by The field to order the results by
    # @option opts [Integer] :limit Limits the number of results. If not provided, a limit of 200 will be used. The maximum allowed limit is 500
    # @option opts [String] :source_type The source type of the transaction
    # @option opts [String] :source_id The source ID of the transaction
    # @option opts [String] :dest_type The destination type of the transaction
    # @option opts [String] :dest_id The destination ID of the transaction
    # @option opts [String] :assets A list of assets to filter by, seperated by commas
    # @option opts [String] :tx_hash Returns only results with a specified txHash
    # @return [Array<(Array<TransactionResponse>, Integer, Hash)>] Array<TransactionResponse> data, response status code and response headers
    def transactions_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.transactions_get ...'
      end
      allowable_values = ["createdAt", "lastUpdated"]
      if @api_client.config.client_side_validation && opts[:'order_by'] && !allowable_values.include?(opts[:'order_by'])
        fail ArgumentError, "invalid value for \"order_by\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DefaultApi.transactions_get, must be greater than or equal to 1.'
      end

      allowable_values = ["VAULT_ACCOUNT", "EXCHANGE_ACCOUNT", "INTERNAL_WALLET", "EXTERNAL_WALLET", "FIAT_ACCOUNT", "NETWORK_CONNECTION", "COMPOUND", "UNKNOWN", "GAS_STATION", "OEC_PARTNER"]
      if @api_client.config.client_side_validation && opts[:'source_type'] && !allowable_values.include?(opts[:'source_type'])
        fail ArgumentError, "invalid value for \"source_type\", must be one of #{allowable_values}"
      end
      allowable_values = ["VAULT_ACCOUNT", "EXCHANGE_ACCOUNT", "INTERNAL_WALLET", "EXTERNAL_WALLET", "FIAT_ACCOUNT", "NETWORK_CONNECTION", "COMPOUND", "ONE_TIME_ADDRESS", "OEC_PARTNER"]
      if @api_client.config.client_side_validation && opts[:'dest_type'] && !allowable_values.include?(opts[:'dest_type'])
        fail ArgumentError, "invalid value for \"dest_type\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/transactions'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'before'] = opts[:'before'] if !opts[:'before'].nil?
      query_params[:'after'] = opts[:'after'] if !opts[:'after'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'orderBy'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'sourceType'] = opts[:'source_type'] if !opts[:'source_type'].nil?
      query_params[:'sourceId'] = opts[:'source_id'] if !opts[:'source_id'].nil?
      query_params[:'destType'] = opts[:'dest_type'] if !opts[:'dest_type'].nil?
      query_params[:'destId'] = opts[:'dest_id'] if !opts[:'dest_id'].nil?
      query_params[:'assets'] = opts[:'assets'] if !opts[:'assets'].nil?
      query_params[:'txHash'] = opts[:'tx_hash'] if !opts[:'tx_hash'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<TransactionResponse>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth', 'bearerTokenAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.transactions_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#transactions_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a new transaction
    # @param [Hash] opts the optional parameters
    # @option opts [TransactionRequest] :transaction_request 
    # @return [CreateTransactionResponse]
    def transactions_post(opts = {})
      data, _status_code, _headers = transactions_post_with_http_info(opts)
      data
    end

    # Creates a new transaction
    # @param [Hash] opts the optional parameters
    # @option opts [TransactionRequest] :transaction_request 
    # @return [Array<(CreateTransactionResponse, Integer, Hash)>] CreateTransactionResponse data, response status code and response headers
    def transactions_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.transactions_post ...'
      end
      # resource path
      local_var_path = '/transactions'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*', 'application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'transaction_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'CreateTransactionResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth', 'bearerTokenAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.transactions_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#transactions_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Cancels a transaction by ID
    # @param tx_id [String] The ID of the transaction to cancel
    # @param [Hash] opts the optional parameters
    # @return [CancelTransactionResponse]
    def transactions_tx_id_cancel_post(tx_id, opts = {})
      data, _status_code, _headers = transactions_tx_id_cancel_post_with_http_info(tx_id, opts)
      data
    end

    # Cancels a transaction by ID
    # @param tx_id [String] The ID of the transaction to cancel
    # @param [Hash] opts the optional parameters
    # @return [Array<(CancelTransactionResponse, Integer, Hash)>] CancelTransactionResponse data, response status code and response headers
    def transactions_tx_id_cancel_post_with_http_info(tx_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.transactions_tx_id_cancel_post ...'
      end
      # verify the required parameter 'tx_id' is set
      if @api_client.config.client_side_validation && tx_id.nil?
        fail ArgumentError, "Missing the required parameter 'tx_id' when calling DefaultApi.transactions_tx_id_cancel_post"
      end
      # resource path
      local_var_path = '/transactions/{txId}/cancel'.sub('{' + 'txId' + '}', CGI.escape(tx_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CancelTransactionResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth', 'bearerTokenAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.transactions_tx_id_cancel_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#transactions_tx_id_cancel_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Drop ETH based transaction by ID
    # @param tx_id [String] The ID of the transaction
    # @param [Hash] opts the optional parameters
    # @option opts [DropTransactionRequest] :drop_transaction_request 
    # @return [DropTransactionResponse]
    def transactions_tx_id_drop_post(tx_id, opts = {})
      data, _status_code, _headers = transactions_tx_id_drop_post_with_http_info(tx_id, opts)
      data
    end

    # Drop ETH based transaction by ID
    # @param tx_id [String] The ID of the transaction
    # @param [Hash] opts the optional parameters
    # @option opts [DropTransactionRequest] :drop_transaction_request 
    # @return [Array<(DropTransactionResponse, Integer, Hash)>] DropTransactionResponse data, response status code and response headers
    def transactions_tx_id_drop_post_with_http_info(tx_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.transactions_tx_id_drop_post ...'
      end
      # verify the required parameter 'tx_id' is set
      if @api_client.config.client_side_validation && tx_id.nil?
        fail ArgumentError, "Missing the required parameter 'tx_id' when calling DefaultApi.transactions_tx_id_drop_post"
      end
      # resource path
      local_var_path = '/transactions/{txId}/drop'.sub('{' + 'txId' + '}', CGI.escape(tx_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*', 'application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'drop_transaction_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'DropTransactionResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth', 'bearerTokenAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.transactions_tx_id_drop_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#transactions_tx_id_drop_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Freezes a transaction by ID
    # @param tx_id [String] The ID of the transaction to freeze
    # @param [Hash] opts the optional parameters
    # @return [FreezeTransactionResponse]
    def transactions_tx_id_freeze_post(tx_id, opts = {})
      data, _status_code, _headers = transactions_tx_id_freeze_post_with_http_info(tx_id, opts)
      data
    end

    # Freezes a transaction by ID
    # @param tx_id [String] The ID of the transaction to freeze
    # @param [Hash] opts the optional parameters
    # @return [Array<(FreezeTransactionResponse, Integer, Hash)>] FreezeTransactionResponse data, response status code and response headers
    def transactions_tx_id_freeze_post_with_http_info(tx_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.transactions_tx_id_freeze_post ...'
      end
      # verify the required parameter 'tx_id' is set
      if @api_client.config.client_side_validation && tx_id.nil?
        fail ArgumentError, "Missing the required parameter 'tx_id' when calling DefaultApi.transactions_tx_id_freeze_post"
      end
      # resource path
      local_var_path = '/transactions/{txId}/freeze'.sub('{' + 'txId' + '}', CGI.escape(tx_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FreezeTransactionResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth', 'bearerTokenAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.transactions_tx_id_freeze_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#transactions_tx_id_freeze_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a transaction by ID
    # @param tx_id [String] The ID of the transaction to return
    # @param [Hash] opts the optional parameters
    # @return [TransactionResponse]
    def transactions_tx_id_get(tx_id, opts = {})
      data, _status_code, _headers = transactions_tx_id_get_with_http_info(tx_id, opts)
      data
    end

    # Returns a transaction by ID
    # @param tx_id [String] The ID of the transaction to return
    # @param [Hash] opts the optional parameters
    # @return [Array<(TransactionResponse, Integer, Hash)>] TransactionResponse data, response status code and response headers
    def transactions_tx_id_get_with_http_info(tx_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.transactions_tx_id_get ...'
      end
      # verify the required parameter 'tx_id' is set
      if @api_client.config.client_side_validation && tx_id.nil?
        fail ArgumentError, "Missing the required parameter 'tx_id' when calling DefaultApi.transactions_tx_id_get"
      end
      # resource path
      local_var_path = '/transactions/{txId}'.sub('{' + 'txId' + '}', CGI.escape(tx_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TransactionResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth', 'bearerTokenAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.transactions_tx_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#transactions_tx_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Overrides the required number of confirmations for a transaction completion by transaction ID
    # @param tx_id [String] The ID of the transaction
    # @param [Hash] opts the optional parameters
    # @option opts [SetConfirmationsThresholdRequest] :set_confirmations_threshold_request 
    # @return [SetConfirmationsThresholdResponse]
    def transactions_tx_id_set_confirmation_threshold_post(tx_id, opts = {})
      data, _status_code, _headers = transactions_tx_id_set_confirmation_threshold_post_with_http_info(tx_id, opts)
      data
    end

    # Overrides the required number of confirmations for a transaction completion by transaction ID
    # @param tx_id [String] The ID of the transaction
    # @param [Hash] opts the optional parameters
    # @option opts [SetConfirmationsThresholdRequest] :set_confirmations_threshold_request 
    # @return [Array<(SetConfirmationsThresholdResponse, Integer, Hash)>] SetConfirmationsThresholdResponse data, response status code and response headers
    def transactions_tx_id_set_confirmation_threshold_post_with_http_info(tx_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.transactions_tx_id_set_confirmation_threshold_post ...'
      end
      # verify the required parameter 'tx_id' is set
      if @api_client.config.client_side_validation && tx_id.nil?
        fail ArgumentError, "Missing the required parameter 'tx_id' when calling DefaultApi.transactions_tx_id_set_confirmation_threshold_post"
      end
      # resource path
      local_var_path = '/transactions/{txId}/set_confirmation_threshold'.sub('{' + 'txId' + '}', CGI.escape(tx_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*', 'application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'set_confirmations_threshold_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'SetConfirmationsThresholdResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth', 'bearerTokenAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.transactions_tx_id_set_confirmation_threshold_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#transactions_tx_id_set_confirmation_threshold_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Unfreezes a transaction by ID
    # @param tx_id [String] The ID of the transaction to unfreeze
    # @param [Hash] opts the optional parameters
    # @return [UnfreezeTransactionResponse]
    def transactions_tx_id_unfreeze_post(tx_id, opts = {})
      data, _status_code, _headers = transactions_tx_id_unfreeze_post_with_http_info(tx_id, opts)
      data
    end

    # Unfreezes a transaction by ID
    # @param tx_id [String] The ID of the transaction to unfreeze
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnfreezeTransactionResponse, Integer, Hash)>] UnfreezeTransactionResponse data, response status code and response headers
    def transactions_tx_id_unfreeze_post_with_http_info(tx_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.transactions_tx_id_unfreeze_post ...'
      end
      # verify the required parameter 'tx_id' is set
      if @api_client.config.client_side_validation && tx_id.nil?
        fail ArgumentError, "Missing the required parameter 'tx_id' when calling DefaultApi.transactions_tx_id_unfreeze_post"
      end
      # resource path
      local_var_path = '/transactions/{txId}/unfreeze'.sub('{' + 'txId' + '}', CGI.escape(tx_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UnfreezeTransactionResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth', 'bearerTokenAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.transactions_tx_id_unfreeze_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#transactions_tx_id_unfreeze_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Check if given address is valid
    # @param asset_id [String] The asset of the address
    # @param address [String] The address to validate
    # @param [Hash] opts the optional parameters
    # @return [ValidateAddressResponse]
    def transactions_validate_address_asset_id_address_get(asset_id, address, opts = {})
      data, _status_code, _headers = transactions_validate_address_asset_id_address_get_with_http_info(asset_id, address, opts)
      data
    end

    # Check if given address is valid
    # @param asset_id [String] The asset of the address
    # @param address [String] The address to validate
    # @param [Hash] opts the optional parameters
    # @return [Array<(ValidateAddressResponse, Integer, Hash)>] ValidateAddressResponse data, response status code and response headers
    def transactions_validate_address_asset_id_address_get_with_http_info(asset_id, address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.transactions_validate_address_asset_id_address_get ...'
      end
      # verify the required parameter 'asset_id' is set
      if @api_client.config.client_side_validation && asset_id.nil?
        fail ArgumentError, "Missing the required parameter 'asset_id' when calling DefaultApi.transactions_validate_address_asset_id_address_get"
      end
      # verify the required parameter 'address' is set
      if @api_client.config.client_side_validation && address.nil?
        fail ArgumentError, "Missing the required parameter 'address' when calling DefaultApi.transactions_validate_address_asset_id_address_get"
      end
      # resource path
      local_var_path = '/transactions/validate_address/{assetId}/{address}'.sub('{' + 'assetId' + '}', CGI.escape(asset_id.to_s)).sub('{' + 'address' + '}', CGI.escape(address.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ValidateAddressResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth', 'bearerTokenAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.transactions_validate_address_asset_id_address_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#transactions_validate_address_asset_id_address_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets a list of transfer tickets
    # @param [Hash] opts the optional parameters
    # @return [Array<TransferTicketResponse>]
    def transfer_tickets_get(opts = {})
      data, _status_code, _headers = transfer_tickets_get_with_http_info(opts)
      data
    end

    # Gets a list of transfer tickets
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<TransferTicketResponse>, Integer, Hash)>] Array<TransferTicketResponse> data, response status code and response headers
    def transfer_tickets_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.transfer_tickets_get ...'
      end
      # resource path
      local_var_path = '/transfer_tickets'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<TransferTicketResponse>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth', 'bearerTokenAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.transfer_tickets_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#transfer_tickets_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a new transfer ticket
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [CreateTransferTicketResponse]
    def transfer_tickets_post(opts = {})
      data, _status_code, _headers = transfer_tickets_post_with_http_info(opts)
      data
    end

    # Creates a new transfer ticket
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(CreateTransferTicketResponse, Integer, Hash)>] CreateTransferTicketResponse data, response status code and response headers
    def transfer_tickets_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.transfer_tickets_post ...'
      end
      # resource path
      local_var_path = '/transfer_tickets'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*', 'application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'unknown_base_type'])

      # return_type
      return_type = opts[:debug_return_type] || 'CreateTransferTicketResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth', 'bearerTokenAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.transfer_tickets_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#transfer_tickets_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Cancel a transfer request
    # @param ticket_id [String] The ID of the ticket
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def transfer_tickets_ticket_id_cancel_post(ticket_id, opts = {})
      transfer_tickets_ticket_id_cancel_post_with_http_info(ticket_id, opts)
      nil
    end

    # Cancel a transfer request
    # @param ticket_id [String] The ID of the ticket
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def transfer_tickets_ticket_id_cancel_post_with_http_info(ticket_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.transfer_tickets_ticket_id_cancel_post ...'
      end
      # verify the required parameter 'ticket_id' is set
      if @api_client.config.client_side_validation && ticket_id.nil?
        fail ArgumentError, "Missing the required parameter 'ticket_id' when calling DefaultApi.transfer_tickets_ticket_id_cancel_post"
      end
      # resource path
      local_var_path = '/transfer_tickets/{ticketId}/cancel'.sub('{' + 'ticketId' + '}', CGI.escape(ticket_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth', 'bearerTokenAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.transfer_tickets_ticket_id_cancel_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#transfer_tickets_ticket_id_cancel_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a specific ticket by ticket ID
    # @param ticket_id [String] The ID of the ticket
    # @param [Hash] opts the optional parameters
    # @return [TransferTicketResponse]
    def transfer_tickets_ticket_id_get(ticket_id, opts = {})
      data, _status_code, _headers = transfer_tickets_ticket_id_get_with_http_info(ticket_id, opts)
      data
    end

    # Get a specific ticket by ticket ID
    # @param ticket_id [String] The ID of the ticket
    # @param [Hash] opts the optional parameters
    # @return [Array<(TransferTicketResponse, Integer, Hash)>] TransferTicketResponse data, response status code and response headers
    def transfer_tickets_ticket_id_get_with_http_info(ticket_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.transfer_tickets_ticket_id_get ...'
      end
      # verify the required parameter 'ticket_id' is set
      if @api_client.config.client_side_validation && ticket_id.nil?
        fail ArgumentError, "Missing the required parameter 'ticket_id' when calling DefaultApi.transfer_tickets_ticket_id_get"
      end
      # resource path
      local_var_path = '/transfer_tickets/{ticketId}'.sub('{' + 'ticketId' + '}', CGI.escape(ticket_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TransferTicketResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth', 'bearerTokenAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.transfer_tickets_ticket_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#transfer_tickets_ticket_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a term by ticket ID and term ID
    # @param ticket_id [String] The ID of the ticket
    # @param term_id [String] The ID of the term
    # @param [Hash] opts the optional parameters
    # @return [TransferTicketTermResponse]
    def transfer_tickets_ticket_id_term_id_get(ticket_id, term_id, opts = {})
      data, _status_code, _headers = transfer_tickets_ticket_id_term_id_get_with_http_info(ticket_id, term_id, opts)
      data
    end

    # Get a term by ticket ID and term ID
    # @param ticket_id [String] The ID of the ticket
    # @param term_id [String] The ID of the term
    # @param [Hash] opts the optional parameters
    # @return [Array<(TransferTicketTermResponse, Integer, Hash)>] TransferTicketTermResponse data, response status code and response headers
    def transfer_tickets_ticket_id_term_id_get_with_http_info(ticket_id, term_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.transfer_tickets_ticket_id_term_id_get ...'
      end
      # verify the required parameter 'ticket_id' is set
      if @api_client.config.client_side_validation && ticket_id.nil?
        fail ArgumentError, "Missing the required parameter 'ticket_id' when calling DefaultApi.transfer_tickets_ticket_id_term_id_get"
      end
      # verify the required parameter 'term_id' is set
      if @api_client.config.client_side_validation && term_id.nil?
        fail ArgumentError, "Missing the required parameter 'term_id' when calling DefaultApi.transfer_tickets_ticket_id_term_id_get"
      end
      # resource path
      local_var_path = '/transfer_tickets/{ticketId}/{termId}'.sub('{' + 'ticketId' + '}', CGI.escape(ticket_id.to_s)).sub('{' + 'termId' + '}', CGI.escape(term_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TransferTicketTermResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth', 'bearerTokenAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.transfer_tickets_ticket_id_term_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#transfer_tickets_ticket_id_term_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Triggers a transfer for a term in ticket
    # @param ticket_id [String] The ID of the ticket
    # @param term_id [String] The ID of the term
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def transfer_tickets_ticket_id_term_id_transfer_post(ticket_id, term_id, opts = {})
      transfer_tickets_ticket_id_term_id_transfer_post_with_http_info(ticket_id, term_id, opts)
      nil
    end

    # Triggers a transfer for a term in ticket
    # @param ticket_id [String] The ID of the ticket
    # @param term_id [String] The ID of the term
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def transfer_tickets_ticket_id_term_id_transfer_post_with_http_info(ticket_id, term_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.transfer_tickets_ticket_id_term_id_transfer_post ...'
      end
      # verify the required parameter 'ticket_id' is set
      if @api_client.config.client_side_validation && ticket_id.nil?
        fail ArgumentError, "Missing the required parameter 'ticket_id' when calling DefaultApi.transfer_tickets_ticket_id_term_id_transfer_post"
      end
      # verify the required parameter 'term_id' is set
      if @api_client.config.client_side_validation && term_id.nil?
        fail ArgumentError, "Missing the required parameter 'term_id' when calling DefaultApi.transfer_tickets_ticket_id_term_id_transfer_post"
      end
      # resource path
      local_var_path = '/transfer_tickets/{ticketId}/{termId}/transfer'.sub('{' + 'ticketId' + '}', CGI.escape(ticket_id.to_s)).sub('{' + 'termId' + '}', CGI.escape(term_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'unknown_base_type'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth', 'bearerTokenAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.transfer_tickets_ticket_id_term_id_transfer_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#transfer_tickets_ticket_id_term_id_transfer_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Overrides the required number of confirmations for a transaction completion by its TxHash
    # @param tx_hash [String] The TxHash
    # @param [Hash] opts the optional parameters
    # @option opts [SetConfirmationsThresholdRequest] :set_confirmations_threshold_request 
    # @return [SetConfirmationsThresholdResponse]
    def tx_hash_tx_hash_set_confirmation_threshold_post(tx_hash, opts = {})
      data, _status_code, _headers = tx_hash_tx_hash_set_confirmation_threshold_post_with_http_info(tx_hash, opts)
      data
    end

    # Overrides the required number of confirmations for a transaction completion by its TxHash
    # @param tx_hash [String] The TxHash
    # @param [Hash] opts the optional parameters
    # @option opts [SetConfirmationsThresholdRequest] :set_confirmations_threshold_request 
    # @return [Array<(SetConfirmationsThresholdResponse, Integer, Hash)>] SetConfirmationsThresholdResponse data, response status code and response headers
    def tx_hash_tx_hash_set_confirmation_threshold_post_with_http_info(tx_hash, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.tx_hash_tx_hash_set_confirmation_threshold_post ...'
      end
      # verify the required parameter 'tx_hash' is set
      if @api_client.config.client_side_validation && tx_hash.nil?
        fail ArgumentError, "Missing the required parameter 'tx_hash' when calling DefaultApi.tx_hash_tx_hash_set_confirmation_threshold_post"
      end
      # resource path
      local_var_path = '/txHash/{txHash}/set_confirmation_threshold'.sub('{' + 'txHash' + '}', CGI.escape(tx_hash.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*', 'application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'set_confirmations_threshold_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'SetConfirmationsThresholdResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth', 'bearerTokenAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.tx_hash_tx_hash_set_confirmation_threshold_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#tx_hash_tx_hash_set_confirmation_threshold_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a list of users
    # @param [Hash] opts the optional parameters
    # @return [GetUsersResponse]
    def users_get(opts = {})
      data, _status_code, _headers = users_get_with_http_info(opts)
      data
    end

    # Returns a list of users
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetUsersResponse, Integer, Hash)>] GetUsersResponse data, response status code and response headers
    def users_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.users_get ...'
      end
      # resource path
      local_var_path = '/users'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetUsersResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth', 'bearerTokenAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.users_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#users_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves all vault accounts for the specified filter.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name_prefix 
    # @option opts [String] :name_suffix 
    # @option opts [String] :min_amount_threshold 
    # @option opts [String] :asset_id 
    # @return [Array<VaultAccount>]
    def vault_accounts_get(opts = {})
      data, _status_code, _headers = vault_accounts_get_with_http_info(opts)
      data
    end

    # Retrieves all vault accounts for the specified filter.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name_prefix 
    # @option opts [String] :name_suffix 
    # @option opts [String] :min_amount_threshold 
    # @option opts [String] :asset_id 
    # @return [Array<(Array<VaultAccount>, Integer, Hash)>] Array<VaultAccount> data, response status code and response headers
    def vault_accounts_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.vault_accounts_get ...'
      end
      # resource path
      local_var_path = '/vault/accounts'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'namePrefix'] = opts[:'name_prefix'] if !opts[:'name_prefix'].nil?
      query_params[:'nameSuffix'] = opts[:'name_suffix'] if !opts[:'name_suffix'].nil?
      query_params[:'minAmountThreshold'] = opts[:'min_amount_threshold'] if !opts[:'min_amount_threshold'].nil?
      query_params[:'assetId'] = opts[:'asset_id'] if !opts[:'asset_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<VaultAccount>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth', 'bearerTokenAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.vault_accounts_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#vault_accounts_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a new vault account
    # @param unknown_base_type [UNKNOWN_BASE_TYPE] 
    # @param [Hash] opts the optional parameters
    # @return [VaultAccount]
    def vault_accounts_post(unknown_base_type, opts = {})
      data, _status_code, _headers = vault_accounts_post_with_http_info(unknown_base_type, opts)
      data
    end

    # Creates a new vault account
    # @param unknown_base_type [UNKNOWN_BASE_TYPE] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(VaultAccount, Integer, Hash)>] VaultAccount data, response status code and response headers
    def vault_accounts_post_with_http_info(unknown_base_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.vault_accounts_post ...'
      end
      # resource path
      local_var_path = '/vault/accounts'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*', 'application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(unknown_base_type)

      # return_type
      return_type = opts[:debug_return_type] || 'VaultAccount'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth', 'bearerTokenAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.vault_accounts_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#vault_accounts_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Activate a wallet in a Vault account
    # @param vault_account_id [String] The ID of the vault account to return, or &#39;default&#39; for the default vault account
    # @param asset_id [String] The ID of the asset
    # @param [Hash] opts the optional parameters
    # @return [CreateVaultAssetResponse]
    def vault_accounts_vault_account_id_asset_id_activate_post(vault_account_id, asset_id, opts = {})
      data, _status_code, _headers = vault_accounts_vault_account_id_asset_id_activate_post_with_http_info(vault_account_id, asset_id, opts)
      data
    end

    # Activate a wallet in a Vault account
    # @param vault_account_id [String] The ID of the vault account to return, or &#39;default&#39; for the default vault account
    # @param asset_id [String] The ID of the asset
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateVaultAssetResponse, Integer, Hash)>] CreateVaultAssetResponse data, response status code and response headers
    def vault_accounts_vault_account_id_asset_id_activate_post_with_http_info(vault_account_id, asset_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.vault_accounts_vault_account_id_asset_id_activate_post ...'
      end
      # verify the required parameter 'vault_account_id' is set
      if @api_client.config.client_side_validation && vault_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'vault_account_id' when calling DefaultApi.vault_accounts_vault_account_id_asset_id_activate_post"
      end
      # verify the required parameter 'asset_id' is set
      if @api_client.config.client_side_validation && asset_id.nil?
        fail ArgumentError, "Missing the required parameter 'asset_id' when calling DefaultApi.vault_accounts_vault_account_id_asset_id_activate_post"
      end
      # resource path
      local_var_path = '/vault/accounts/{vaultAccountId}/{assetId}/activate'.sub('{' + 'vaultAccountId' + '}', CGI.escape(vault_account_id.to_s)).sub('{' + 'assetId' + '}', CGI.escape(asset_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CreateVaultAssetResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth', 'bearerTokenAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.vault_accounts_vault_account_id_asset_id_activate_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#vault_accounts_vault_account_id_asset_id_activate_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Translates an existing segwit address to the legacy format
    # @param vault_account_id [String] The ID of the vault account
    # @param asset_id [String] The ID of the asset
    # @param address_id [String] The segwit address to translate
    # @param [Hash] opts the optional parameters
    # @return [CreateAddressResponse]
    def vault_accounts_vault_account_id_asset_id_addresses_address_id_create_legacy_post(vault_account_id, asset_id, address_id, opts = {})
      data, _status_code, _headers = vault_accounts_vault_account_id_asset_id_addresses_address_id_create_legacy_post_with_http_info(vault_account_id, asset_id, address_id, opts)
      data
    end

    # Translates an existing segwit address to the legacy format
    # @param vault_account_id [String] The ID of the vault account
    # @param asset_id [String] The ID of the asset
    # @param address_id [String] The segwit address to translate
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateAddressResponse, Integer, Hash)>] CreateAddressResponse data, response status code and response headers
    def vault_accounts_vault_account_id_asset_id_addresses_address_id_create_legacy_post_with_http_info(vault_account_id, asset_id, address_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.vault_accounts_vault_account_id_asset_id_addresses_address_id_create_legacy_post ...'
      end
      # verify the required parameter 'vault_account_id' is set
      if @api_client.config.client_side_validation && vault_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'vault_account_id' when calling DefaultApi.vault_accounts_vault_account_id_asset_id_addresses_address_id_create_legacy_post"
      end
      # verify the required parameter 'asset_id' is set
      if @api_client.config.client_side_validation && asset_id.nil?
        fail ArgumentError, "Missing the required parameter 'asset_id' when calling DefaultApi.vault_accounts_vault_account_id_asset_id_addresses_address_id_create_legacy_post"
      end
      # verify the required parameter 'address_id' is set
      if @api_client.config.client_side_validation && address_id.nil?
        fail ArgumentError, "Missing the required parameter 'address_id' when calling DefaultApi.vault_accounts_vault_account_id_asset_id_addresses_address_id_create_legacy_post"
      end
      # resource path
      local_var_path = '/vault/accounts/{vaultAccountId}/{assetId}/addresses/{addressId}/create_legacy'.sub('{' + 'vaultAccountId' + '}', CGI.escape(vault_account_id.to_s)).sub('{' + 'assetId' + '}', CGI.escape(asset_id.to_s)).sub('{' + 'addressId' + '}', CGI.escape(address_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CreateAddressResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth', 'bearerTokenAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.vault_accounts_vault_account_id_asset_id_addresses_address_id_create_legacy_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#vault_accounts_vault_account_id_asset_id_addresses_address_id_create_legacy_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update the description of an existing address within a vault wallet
    # @param vault_account_id [String] The ID of the vault account
    # @param asset_id [String] The ID of the asset
    # @param address_id [String] The address for which to add a description. For XRP, use &lt;address&gt;:&lt;tag&gt;, for all other assets, use only the address
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [nil]
    def vault_accounts_vault_account_id_asset_id_addresses_address_id_put(vault_account_id, asset_id, address_id, opts = {})
      vault_accounts_vault_account_id_asset_id_addresses_address_id_put_with_http_info(vault_account_id, asset_id, address_id, opts)
      nil
    end

    # Update the description of an existing address within a vault wallet
    # @param vault_account_id [String] The ID of the vault account
    # @param asset_id [String] The ID of the asset
    # @param address_id [String] The address for which to add a description. For XRP, use &lt;address&gt;:&lt;tag&gt;, for all other assets, use only the address
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vault_accounts_vault_account_id_asset_id_addresses_address_id_put_with_http_info(vault_account_id, asset_id, address_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.vault_accounts_vault_account_id_asset_id_addresses_address_id_put ...'
      end
      # verify the required parameter 'vault_account_id' is set
      if @api_client.config.client_side_validation && vault_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'vault_account_id' when calling DefaultApi.vault_accounts_vault_account_id_asset_id_addresses_address_id_put"
      end
      # verify the required parameter 'asset_id' is set
      if @api_client.config.client_side_validation && asset_id.nil?
        fail ArgumentError, "Missing the required parameter 'asset_id' when calling DefaultApi.vault_accounts_vault_account_id_asset_id_addresses_address_id_put"
      end
      # verify the required parameter 'address_id' is set
      if @api_client.config.client_side_validation && address_id.nil?
        fail ArgumentError, "Missing the required parameter 'address_id' when calling DefaultApi.vault_accounts_vault_account_id_asset_id_addresses_address_id_put"
      end
      # resource path
      local_var_path = '/vault/accounts/{vaultAccountId}/{assetId}/addresses/{addressId}'.sub('{' + 'vaultAccountId' + '}', CGI.escape(vault_account_id.to_s)).sub('{' + 'assetId' + '}', CGI.escape(asset_id.to_s)).sub('{' + 'addressId' + '}', CGI.escape(address_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'unknown_base_type'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth', 'bearerTokenAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.vault_accounts_vault_account_id_asset_id_addresses_address_id_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#vault_accounts_vault_account_id_asset_id_addresses_address_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Sets a reference customer ID for AML
    # @param vault_account_id [String] The ID of the vault account
    # @param asset_id [String] The ID of the asset
    # @param address_id [String] The address for which to add a description. For XRP, use &lt;address&gt;:&lt;tag&gt;, for all other assets, use only the address
    # @param unknown_base_type [UNKNOWN_BASE_TYPE] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def vault_accounts_vault_account_id_asset_id_addresses_address_id_set_customer_ref_id_post(vault_account_id, asset_id, address_id, unknown_base_type, opts = {})
      vault_accounts_vault_account_id_asset_id_addresses_address_id_set_customer_ref_id_post_with_http_info(vault_account_id, asset_id, address_id, unknown_base_type, opts)
      nil
    end

    # Sets a reference customer ID for AML
    # @param vault_account_id [String] The ID of the vault account
    # @param asset_id [String] The ID of the asset
    # @param address_id [String] The address for which to add a description. For XRP, use &lt;address&gt;:&lt;tag&gt;, for all other assets, use only the address
    # @param unknown_base_type [UNKNOWN_BASE_TYPE] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vault_accounts_vault_account_id_asset_id_addresses_address_id_set_customer_ref_id_post_with_http_info(vault_account_id, asset_id, address_id, unknown_base_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.vault_accounts_vault_account_id_asset_id_addresses_address_id_set_customer_ref_id_post ...'
      end
      # verify the required parameter 'vault_account_id' is set
      if @api_client.config.client_side_validation && vault_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'vault_account_id' when calling DefaultApi.vault_accounts_vault_account_id_asset_id_addresses_address_id_set_customer_ref_id_post"
      end
      # verify the required parameter 'asset_id' is set
      if @api_client.config.client_side_validation && asset_id.nil?
        fail ArgumentError, "Missing the required parameter 'asset_id' when calling DefaultApi.vault_accounts_vault_account_id_asset_id_addresses_address_id_set_customer_ref_id_post"
      end
      # verify the required parameter 'address_id' is set
      if @api_client.config.client_side_validation && address_id.nil?
        fail ArgumentError, "Missing the required parameter 'address_id' when calling DefaultApi.vault_accounts_vault_account_id_asset_id_addresses_address_id_set_customer_ref_id_post"
      end
      # resource path
      local_var_path = '/vault/accounts/{vaultAccountId}/{assetId}/addresses/{addressId}/set_customer_ref_id'.sub('{' + 'vaultAccountId' + '}', CGI.escape(vault_account_id.to_s)).sub('{' + 'assetId' + '}', CGI.escape(asset_id.to_s)).sub('{' + 'addressId' + '}', CGI.escape(address_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(unknown_base_type)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth', 'bearerTokenAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.vault_accounts_vault_account_id_asset_id_addresses_address_id_set_customer_ref_id_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#vault_accounts_vault_account_id_asset_id_addresses_address_id_set_customer_ref_id_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns all addresses generated for a Vault wallet
    # @param vault_account_id [String] The ID of the vault account to return
    # @param asset_id [String] The ID of the asset
    # @param [Hash] opts the optional parameters
    # @return [Array<VaultWalletAddress>]
    def vault_accounts_vault_account_id_asset_id_addresses_get(vault_account_id, asset_id, opts = {})
      data, _status_code, _headers = vault_accounts_vault_account_id_asset_id_addresses_get_with_http_info(vault_account_id, asset_id, opts)
      data
    end

    # Returns all addresses generated for a Vault wallet
    # @param vault_account_id [String] The ID of the vault account to return
    # @param asset_id [String] The ID of the asset
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<VaultWalletAddress>, Integer, Hash)>] Array<VaultWalletAddress> data, response status code and response headers
    def vault_accounts_vault_account_id_asset_id_addresses_get_with_http_info(vault_account_id, asset_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.vault_accounts_vault_account_id_asset_id_addresses_get ...'
      end
      # verify the required parameter 'vault_account_id' is set
      if @api_client.config.client_side_validation && vault_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'vault_account_id' when calling DefaultApi.vault_accounts_vault_account_id_asset_id_addresses_get"
      end
      # verify the required parameter 'asset_id' is set
      if @api_client.config.client_side_validation && asset_id.nil?
        fail ArgumentError, "Missing the required parameter 'asset_id' when calling DefaultApi.vault_accounts_vault_account_id_asset_id_addresses_get"
      end
      # resource path
      local_var_path = '/vault/accounts/{vaultAccountId}/{assetId}/addresses'.sub('{' + 'vaultAccountId' + '}', CGI.escape(vault_account_id.to_s)).sub('{' + 'assetId' + '}', CGI.escape(asset_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<VaultWalletAddress>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth', 'bearerTokenAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.vault_accounts_vault_account_id_asset_id_addresses_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#vault_accounts_vault_account_id_asset_id_addresses_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Generate a new deposit address for a Vault wallet
    # @param vault_account_id [String] The ID of the vault account to return
    # @param asset_id [String] The ID of the asset
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [CreateAddressResponse]
    def vault_accounts_vault_account_id_asset_id_addresses_post(vault_account_id, asset_id, opts = {})
      data, _status_code, _headers = vault_accounts_vault_account_id_asset_id_addresses_post_with_http_info(vault_account_id, asset_id, opts)
      data
    end

    # Generate a new deposit address for a Vault wallet
    # @param vault_account_id [String] The ID of the vault account to return
    # @param asset_id [String] The ID of the asset
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(CreateAddressResponse, Integer, Hash)>] CreateAddressResponse data, response status code and response headers
    def vault_accounts_vault_account_id_asset_id_addresses_post_with_http_info(vault_account_id, asset_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.vault_accounts_vault_account_id_asset_id_addresses_post ...'
      end
      # verify the required parameter 'vault_account_id' is set
      if @api_client.config.client_side_validation && vault_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'vault_account_id' when calling DefaultApi.vault_accounts_vault_account_id_asset_id_addresses_post"
      end
      # verify the required parameter 'asset_id' is set
      if @api_client.config.client_side_validation && asset_id.nil?
        fail ArgumentError, "Missing the required parameter 'asset_id' when calling DefaultApi.vault_accounts_vault_account_id_asset_id_addresses_post"
      end
      # resource path
      local_var_path = '/vault/accounts/{vaultAccountId}/{assetId}/addresses'.sub('{' + 'vaultAccountId' + '}', CGI.escape(vault_account_id.to_s)).sub('{' + 'assetId' + '}', CGI.escape(asset_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*', 'application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'unknown_base_type'])

      # return_type
      return_type = opts[:debug_return_type] || 'CreateAddressResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth', 'bearerTokenAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.vault_accounts_vault_account_id_asset_id_addresses_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#vault_accounts_vault_account_id_asset_id_addresses_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the public key information for vault account
    # @param vault_account_id [String] 
    # @param asset_id [String] 
    # @param change [Float] 
    # @param address_index [Float] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :compressed 
    # @return [PublicKeyInformation]
    def vault_accounts_vault_account_id_asset_id_change_address_index_public_key_info_get(vault_account_id, asset_id, change, address_index, opts = {})
      data, _status_code, _headers = vault_accounts_vault_account_id_asset_id_change_address_index_public_key_info_get_with_http_info(vault_account_id, asset_id, change, address_index, opts)
      data
    end

    # Gets the public key information for vault account
    # @param vault_account_id [String] 
    # @param asset_id [String] 
    # @param change [Float] 
    # @param address_index [Float] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :compressed 
    # @return [Array<(PublicKeyInformation, Integer, Hash)>] PublicKeyInformation data, response status code and response headers
    def vault_accounts_vault_account_id_asset_id_change_address_index_public_key_info_get_with_http_info(vault_account_id, asset_id, change, address_index, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.vault_accounts_vault_account_id_asset_id_change_address_index_public_key_info_get ...'
      end
      # verify the required parameter 'vault_account_id' is set
      if @api_client.config.client_side_validation && vault_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'vault_account_id' when calling DefaultApi.vault_accounts_vault_account_id_asset_id_change_address_index_public_key_info_get"
      end
      # verify the required parameter 'asset_id' is set
      if @api_client.config.client_side_validation && asset_id.nil?
        fail ArgumentError, "Missing the required parameter 'asset_id' when calling DefaultApi.vault_accounts_vault_account_id_asset_id_change_address_index_public_key_info_get"
      end
      # verify the required parameter 'change' is set
      if @api_client.config.client_side_validation && change.nil?
        fail ArgumentError, "Missing the required parameter 'change' when calling DefaultApi.vault_accounts_vault_account_id_asset_id_change_address_index_public_key_info_get"
      end
      # verify the required parameter 'address_index' is set
      if @api_client.config.client_side_validation && address_index.nil?
        fail ArgumentError, "Missing the required parameter 'address_index' when calling DefaultApi.vault_accounts_vault_account_id_asset_id_change_address_index_public_key_info_get"
      end
      # resource path
      local_var_path = '/vault/accounts/{vaultAccountId}/{assetId}/{change}/{addressIndex}/public_key_info'.sub('{' + 'vaultAccountId' + '}', CGI.escape(vault_account_id.to_s)).sub('{' + 'assetId' + '}', CGI.escape(asset_id.to_s)).sub('{' + 'change' + '}', CGI.escape(change.to_s)).sub('{' + 'addressIndex' + '}', CGI.escape(address_index.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'compressed'] = opts[:'compressed'] if !opts[:'compressed'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PublicKeyInformation'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth', 'bearerTokenAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.vault_accounts_vault_account_id_asset_id_change_address_index_public_key_info_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#vault_accounts_vault_account_id_asset_id_change_address_index_public_key_info_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a wallet of a specific asset inside a Fireblocks Vault account
    # @param vault_account_id [String] The ID of the vault account to return
    # @param asset_id [String] The ID of the asset
    # @param [Hash] opts the optional parameters
    # @return [VaultAsset]
    def vault_accounts_vault_account_id_asset_id_get(vault_account_id, asset_id, opts = {})
      data, _status_code, _headers = vault_accounts_vault_account_id_asset_id_get_with_http_info(vault_account_id, asset_id, opts)
      data
    end

    # Returns a wallet of a specific asset inside a Fireblocks Vault account
    # @param vault_account_id [String] The ID of the vault account to return
    # @param asset_id [String] The ID of the asset
    # @param [Hash] opts the optional parameters
    # @return [Array<(VaultAsset, Integer, Hash)>] VaultAsset data, response status code and response headers
    def vault_accounts_vault_account_id_asset_id_get_with_http_info(vault_account_id, asset_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.vault_accounts_vault_account_id_asset_id_get ...'
      end
      # verify the required parameter 'vault_account_id' is set
      if @api_client.config.client_side_validation && vault_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'vault_account_id' when calling DefaultApi.vault_accounts_vault_account_id_asset_id_get"
      end
      # verify the required parameter 'asset_id' is set
      if @api_client.config.client_side_validation && asset_id.nil?
        fail ArgumentError, "Missing the required parameter 'asset_id' when calling DefaultApi.vault_accounts_vault_account_id_asset_id_get"
      end
      # resource path
      local_var_path = '/vault/accounts/{vaultAccountId}/{assetId}'.sub('{' + 'vaultAccountId' + '}', CGI.escape(vault_account_id.to_s)).sub('{' + 'assetId' + '}', CGI.escape(asset_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'VaultAsset'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth', 'bearerTokenAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.vault_accounts_vault_account_id_asset_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#vault_accounts_vault_account_id_asset_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Allocate funds to private ledger
    # @param vault_account_id [String] The vault account to allocate funds in
    # @param asset_id [String] The allocation asset id
    # @param [Hash] opts the optional parameters
    # @option opts [AllocateFundsRequest] :allocate_funds_request 
    # @return [CreateTransactionResponse]
    def vault_accounts_vault_account_id_asset_id_lock_allocation_post(vault_account_id, asset_id, opts = {})
      data, _status_code, _headers = vault_accounts_vault_account_id_asset_id_lock_allocation_post_with_http_info(vault_account_id, asset_id, opts)
      data
    end

    # Allocate funds to private ledger
    # @param vault_account_id [String] The vault account to allocate funds in
    # @param asset_id [String] The allocation asset id
    # @param [Hash] opts the optional parameters
    # @option opts [AllocateFundsRequest] :allocate_funds_request 
    # @return [Array<(CreateTransactionResponse, Integer, Hash)>] CreateTransactionResponse data, response status code and response headers
    def vault_accounts_vault_account_id_asset_id_lock_allocation_post_with_http_info(vault_account_id, asset_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.vault_accounts_vault_account_id_asset_id_lock_allocation_post ...'
      end
      # verify the required parameter 'vault_account_id' is set
      if @api_client.config.client_side_validation && vault_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'vault_account_id' when calling DefaultApi.vault_accounts_vault_account_id_asset_id_lock_allocation_post"
      end
      # verify the required parameter 'asset_id' is set
      if @api_client.config.client_side_validation && asset_id.nil?
        fail ArgumentError, "Missing the required parameter 'asset_id' when calling DefaultApi.vault_accounts_vault_account_id_asset_id_lock_allocation_post"
      end
      # resource path
      local_var_path = '/vault/accounts/{vaultAccountId}/{assetId}/lock_allocation'.sub('{' + 'vaultAccountId' + '}', CGI.escape(vault_account_id.to_s)).sub('{' + 'assetId' + '}', CGI.escape(asset_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*', 'application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'allocate_funds_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'CreateTransactionResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth', 'bearerTokenAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.vault_accounts_vault_account_id_asset_id_lock_allocation_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#vault_accounts_vault_account_id_asset_id_lock_allocation_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a new wallet in a Vault account
    # @param vault_account_id [String] The ID of the vault account to return, or &#39;default&#39; for the default vault account
    # @param asset_id [String] The ID of the asset
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [CreateVaultAssetResponse]
    def vault_accounts_vault_account_id_asset_id_post(vault_account_id, asset_id, opts = {})
      data, _status_code, _headers = vault_accounts_vault_account_id_asset_id_post_with_http_info(vault_account_id, asset_id, opts)
      data
    end

    # Creates a new wallet in a Vault account
    # @param vault_account_id [String] The ID of the vault account to return, or &#39;default&#39; for the default vault account
    # @param asset_id [String] The ID of the asset
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(CreateVaultAssetResponse, Integer, Hash)>] CreateVaultAssetResponse data, response status code and response headers
    def vault_accounts_vault_account_id_asset_id_post_with_http_info(vault_account_id, asset_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.vault_accounts_vault_account_id_asset_id_post ...'
      end
      # verify the required parameter 'vault_account_id' is set
      if @api_client.config.client_side_validation && vault_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'vault_account_id' when calling DefaultApi.vault_accounts_vault_account_id_asset_id_post"
      end
      # verify the required parameter 'asset_id' is set
      if @api_client.config.client_side_validation && asset_id.nil?
        fail ArgumentError, "Missing the required parameter 'asset_id' when calling DefaultApi.vault_accounts_vault_account_id_asset_id_post"
      end
      # resource path
      local_var_path = '/vault/accounts/{vaultAccountId}/{assetId}'.sub('{' + 'vaultAccountId' + '}', CGI.escape(vault_account_id.to_s)).sub('{' + 'assetId' + '}', CGI.escape(asset_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*', 'application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'unknown_base_type'])

      # return_type
      return_type = opts[:debug_return_type] || 'CreateVaultAssetResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth', 'bearerTokenAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.vault_accounts_vault_account_id_asset_id_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#vault_accounts_vault_account_id_asset_id_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deallocate funds from private ledger
    # @param vault_account_id [String] The vault account to allocate funds in
    # @param asset_id [String] The allocation asset id
    # @param [Hash] opts the optional parameters
    # @option opts [DeallocateFundsRequest] :deallocate_funds_request 
    # @return [CreateTransactionResponse]
    def vault_accounts_vault_account_id_asset_id_release_allocation_post(vault_account_id, asset_id, opts = {})
      data, _status_code, _headers = vault_accounts_vault_account_id_asset_id_release_allocation_post_with_http_info(vault_account_id, asset_id, opts)
      data
    end

    # Deallocate funds from private ledger
    # @param vault_account_id [String] The vault account to allocate funds in
    # @param asset_id [String] The allocation asset id
    # @param [Hash] opts the optional parameters
    # @option opts [DeallocateFundsRequest] :deallocate_funds_request 
    # @return [Array<(CreateTransactionResponse, Integer, Hash)>] CreateTransactionResponse data, response status code and response headers
    def vault_accounts_vault_account_id_asset_id_release_allocation_post_with_http_info(vault_account_id, asset_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.vault_accounts_vault_account_id_asset_id_release_allocation_post ...'
      end
      # verify the required parameter 'vault_account_id' is set
      if @api_client.config.client_side_validation && vault_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'vault_account_id' when calling DefaultApi.vault_accounts_vault_account_id_asset_id_release_allocation_post"
      end
      # verify the required parameter 'asset_id' is set
      if @api_client.config.client_side_validation && asset_id.nil?
        fail ArgumentError, "Missing the required parameter 'asset_id' when calling DefaultApi.vault_accounts_vault_account_id_asset_id_release_allocation_post"
      end
      # resource path
      local_var_path = '/vault/accounts/{vaultAccountId}/{assetId}/release_allocation'.sub('{' + 'vaultAccountId' + '}', CGI.escape(vault_account_id.to_s)).sub('{' + 'assetId' + '}', CGI.escape(asset_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*', 'application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'deallocate_funds_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'CreateTransactionResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth', 'bearerTokenAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.vault_accounts_vault_account_id_asset_id_release_allocation_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#vault_accounts_vault_account_id_asset_id_release_allocation_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets UTXO unspent inputs information
    # @param vault_account_id [String] The ID of the vault account
    # @param asset_id [String] The ID of the asset
    # @param [Hash] opts the optional parameters
    # @return [Array<UnspentInputsData>]
    def vault_accounts_vault_account_id_asset_id_unspent_inputs_get(vault_account_id, asset_id, opts = {})
      data, _status_code, _headers = vault_accounts_vault_account_id_asset_id_unspent_inputs_get_with_http_info(vault_account_id, asset_id, opts)
      data
    end

    # Gets UTXO unspent inputs information
    # @param vault_account_id [String] The ID of the vault account
    # @param asset_id [String] The ID of the asset
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<UnspentInputsData>, Integer, Hash)>] Array<UnspentInputsData> data, response status code and response headers
    def vault_accounts_vault_account_id_asset_id_unspent_inputs_get_with_http_info(vault_account_id, asset_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.vault_accounts_vault_account_id_asset_id_unspent_inputs_get ...'
      end
      # verify the required parameter 'vault_account_id' is set
      if @api_client.config.client_side_validation && vault_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'vault_account_id' when calling DefaultApi.vault_accounts_vault_account_id_asset_id_unspent_inputs_get"
      end
      # verify the required parameter 'asset_id' is set
      if @api_client.config.client_side_validation && asset_id.nil?
        fail ArgumentError, "Missing the required parameter 'asset_id' when calling DefaultApi.vault_accounts_vault_account_id_asset_id_unspent_inputs_get"
      end
      # resource path
      local_var_path = '/vault/accounts/{vaultAccountId}/{assetId}/unspent_inputs'.sub('{' + 'vaultAccountId' + '}', CGI.escape(vault_account_id.to_s)).sub('{' + 'assetId' + '}', CGI.escape(asset_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<UnspentInputsData>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth', 'bearerTokenAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.vault_accounts_vault_account_id_asset_id_unspent_inputs_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#vault_accounts_vault_account_id_asset_id_unspent_inputs_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a Fireblock Vault account by ID
    # @param vault_account_id [String] The ID of the vault account to return type: string
    # @param [Hash] opts the optional parameters
    # @return [VaultAccount]
    def vault_accounts_vault_account_id_get(vault_account_id, opts = {})
      data, _status_code, _headers = vault_accounts_vault_account_id_get_with_http_info(vault_account_id, opts)
      data
    end

    # Returns a Fireblock Vault account by ID
    # @param vault_account_id [String] The ID of the vault account to return type: string
    # @param [Hash] opts the optional parameters
    # @return [Array<(VaultAccount, Integer, Hash)>] VaultAccount data, response status code and response headers
    def vault_accounts_vault_account_id_get_with_http_info(vault_account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.vault_accounts_vault_account_id_get ...'
      end
      # verify the required parameter 'vault_account_id' is set
      if @api_client.config.client_side_validation && vault_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'vault_account_id' when calling DefaultApi.vault_accounts_vault_account_id_get"
      end
      # resource path
      local_var_path = '/vault/accounts/{vaultAccountId}'.sub('{' + 'vaultAccountId' + '}', CGI.escape(vault_account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'VaultAccount'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth', 'bearerTokenAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.vault_accounts_vault_account_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#vault_accounts_vault_account_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Hides a vault account on Fireblocks console
    # @param vault_account_id [String] The vault account to hide
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def vault_accounts_vault_account_id_hide_post(vault_account_id, opts = {})
      vault_accounts_vault_account_id_hide_post_with_http_info(vault_account_id, opts)
      nil
    end

    # Hides a vault account on Fireblocks console
    # @param vault_account_id [String] The vault account to hide
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vault_accounts_vault_account_id_hide_post_with_http_info(vault_account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.vault_accounts_vault_account_id_hide_post ...'
      end
      # verify the required parameter 'vault_account_id' is set
      if @api_client.config.client_side_validation && vault_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'vault_account_id' when calling DefaultApi.vault_accounts_vault_account_id_hide_post"
      end
      # resource path
      local_var_path = '/vault/accounts/{vaultAccountId}/hide'.sub('{' + 'vaultAccountId' + '}', CGI.escape(vault_account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth', 'bearerTokenAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.vault_accounts_vault_account_id_hide_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#vault_accounts_vault_account_id_hide_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Edit a Fireblock Vault account
    # @param vault_account_id [String] The ID of the vault account to edit
    # @param unknown_base_type [UNKNOWN_BASE_TYPE] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def vault_accounts_vault_account_id_put(vault_account_id, unknown_base_type, opts = {})
      vault_accounts_vault_account_id_put_with_http_info(vault_account_id, unknown_base_type, opts)
      nil
    end

    # Edit a Fireblock Vault account
    # @param vault_account_id [String] The ID of the vault account to edit
    # @param unknown_base_type [UNKNOWN_BASE_TYPE] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vault_accounts_vault_account_id_put_with_http_info(vault_account_id, unknown_base_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.vault_accounts_vault_account_id_put ...'
      end
      # verify the required parameter 'vault_account_id' is set
      if @api_client.config.client_side_validation && vault_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'vault_account_id' when calling DefaultApi.vault_accounts_vault_account_id_put"
      end
      # resource path
      local_var_path = '/vault/accounts/{vaultAccountId}'.sub('{' + 'vaultAccountId' + '}', CGI.escape(vault_account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(unknown_base_type)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth', 'bearerTokenAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.vault_accounts_vault_account_id_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#vault_accounts_vault_account_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Sets the autoFuel property of the vault account to true or false
    # @param vault_account_id [String] The vault account ID
    # @param unknown_base_type [UNKNOWN_BASE_TYPE] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def vault_accounts_vault_account_id_set_auto_fuel_post(vault_account_id, unknown_base_type, opts = {})
      vault_accounts_vault_account_id_set_auto_fuel_post_with_http_info(vault_account_id, unknown_base_type, opts)
      nil
    end

    # Sets the autoFuel property of the vault account to true or false
    # @param vault_account_id [String] The vault account ID
    # @param unknown_base_type [UNKNOWN_BASE_TYPE] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vault_accounts_vault_account_id_set_auto_fuel_post_with_http_info(vault_account_id, unknown_base_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.vault_accounts_vault_account_id_set_auto_fuel_post ...'
      end
      # verify the required parameter 'vault_account_id' is set
      if @api_client.config.client_side_validation && vault_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'vault_account_id' when calling DefaultApi.vault_accounts_vault_account_id_set_auto_fuel_post"
      end
      # resource path
      local_var_path = '/vault/accounts/{vaultAccountId}/set_auto_fuel'.sub('{' + 'vaultAccountId' + '}', CGI.escape(vault_account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(unknown_base_type)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth', 'bearerTokenAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.vault_accounts_vault_account_id_set_auto_fuel_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#vault_accounts_vault_account_id_set_auto_fuel_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Sets a reference customer ID for AML
    # @param vault_account_id [String] The vault account ID
    # @param unknown_base_type [UNKNOWN_BASE_TYPE] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def vault_accounts_vault_account_id_set_customer_ref_id_post(vault_account_id, unknown_base_type, opts = {})
      vault_accounts_vault_account_id_set_customer_ref_id_post_with_http_info(vault_account_id, unknown_base_type, opts)
      nil
    end

    # Sets a reference customer ID for AML
    # @param vault_account_id [String] The vault account ID
    # @param unknown_base_type [UNKNOWN_BASE_TYPE] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vault_accounts_vault_account_id_set_customer_ref_id_post_with_http_info(vault_account_id, unknown_base_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.vault_accounts_vault_account_id_set_customer_ref_id_post ...'
      end
      # verify the required parameter 'vault_account_id' is set
      if @api_client.config.client_side_validation && vault_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'vault_account_id' when calling DefaultApi.vault_accounts_vault_account_id_set_customer_ref_id_post"
      end
      # resource path
      local_var_path = '/vault/accounts/{vaultAccountId}/set_customer_ref_id'.sub('{' + 'vaultAccountId' + '}', CGI.escape(vault_account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(unknown_base_type)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth', 'bearerTokenAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.vault_accounts_vault_account_id_set_customer_ref_id_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#vault_accounts_vault_account_id_set_customer_ref_id_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reveals a hidden vault account on Fireblocks console
    # @param vault_account_id [String] The vault account to unhide
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def vault_accounts_vault_account_id_unhide_post(vault_account_id, opts = {})
      vault_accounts_vault_account_id_unhide_post_with_http_info(vault_account_id, opts)
      nil
    end

    # Reveals a hidden vault account on Fireblocks console
    # @param vault_account_id [String] The vault account to unhide
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def vault_accounts_vault_account_id_unhide_post_with_http_info(vault_account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.vault_accounts_vault_account_id_unhide_post ...'
      end
      # verify the required parameter 'vault_account_id' is set
      if @api_client.config.client_side_validation && vault_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'vault_account_id' when calling DefaultApi.vault_accounts_vault_account_id_unhide_post"
      end
      # resource path
      local_var_path = '/vault/accounts/{vaultAccountId}/unhide'.sub('{' + 'vaultAccountId' + '}', CGI.escape(vault_account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth', 'bearerTokenAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.vault_accounts_vault_account_id_unhide_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#vault_accounts_vault_account_id_unhide_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets vault balance summary by asset.
    # @param asset_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [VaultAsset]
    def vault_assets_asset_id_get(asset_id, opts = {})
      data, _status_code, _headers = vault_assets_asset_id_get_with_http_info(asset_id, opts)
      data
    end

    # Gets vault balance summary by asset.
    # @param asset_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(VaultAsset, Integer, Hash)>] VaultAsset data, response status code and response headers
    def vault_assets_asset_id_get_with_http_info(asset_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.vault_assets_asset_id_get ...'
      end
      # verify the required parameter 'asset_id' is set
      if @api_client.config.client_side_validation && asset_id.nil?
        fail ArgumentError, "Missing the required parameter 'asset_id' when calling DefaultApi.vault_assets_asset_id_get"
      end
      # resource path
      local_var_path = '/vault/assets/{assetId}'.sub('{' + 'assetId' + '}', CGI.escape(asset_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'VaultAsset'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth', 'bearerTokenAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.vault_assets_asset_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#vault_assets_asset_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the assets amount summary for all \\ filtered accounts.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :account_name_prefix 
    # @option opts [String] :account_name_suffix 
    # @return [Array<VaultAsset>]
    def vault_assets_get(opts = {})
      data, _status_code, _headers = vault_assets_get_with_http_info(opts)
      data
    end

    # Gets the assets amount summary for all \\ filtered accounts.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :account_name_prefix 
    # @option opts [String] :account_name_suffix 
    # @return [Array<(Array<VaultAsset>, Integer, Hash)>] Array<VaultAsset> data, response status code and response headers
    def vault_assets_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.vault_assets_get ...'
      end
      # resource path
      local_var_path = '/vault/assets'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'accountNamePrefix'] = opts[:'account_name_prefix'] if !opts[:'account_name_prefix'].nil?
      query_params[:'accountNameSuffix'] = opts[:'account_name_suffix'] if !opts[:'account_name_suffix'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<VaultAsset>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth', 'bearerTokenAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.vault_assets_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#vault_assets_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the public key information based on derivationPath and signing algorithm
    # @param derivation_path [String] 
    # @param algorithm [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :compressed 
    # @return [PublicKeyInformation]
    def vault_public_key_info_get(derivation_path, algorithm, opts = {})
      data, _status_code, _headers = vault_public_key_info_get_with_http_info(derivation_path, algorithm, opts)
      data
    end

    # Gets the public key information based on derivationPath and signing algorithm
    # @param derivation_path [String] 
    # @param algorithm [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :compressed 
    # @return [Array<(PublicKeyInformation, Integer, Hash)>] PublicKeyInformation data, response status code and response headers
    def vault_public_key_info_get_with_http_info(derivation_path, algorithm, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.vault_public_key_info_get ...'
      end
      # verify the required parameter 'derivation_path' is set
      if @api_client.config.client_side_validation && derivation_path.nil?
        fail ArgumentError, "Missing the required parameter 'derivation_path' when calling DefaultApi.vault_public_key_info_get"
      end
      # verify the required parameter 'algorithm' is set
      if @api_client.config.client_side_validation && algorithm.nil?
        fail ArgumentError, "Missing the required parameter 'algorithm' when calling DefaultApi.vault_public_key_info_get"
      end
      # resource path
      local_var_path = '/vault/public_key_info/'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'derivationPath'] = derivation_path
      query_params[:'algorithm'] = algorithm
      query_params[:'compressed'] = opts[:'compressed'] if !opts[:'compressed'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PublicKeyInformation'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth', 'bearerTokenAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.vault_public_key_info_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#vault_public_key_info_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Resend failed webhooks
    # @param [Hash] opts the optional parameters
    # @return [ResendWebhooksResponse]
    def webhooks_resend_post(opts = {})
      data, _status_code, _headers = webhooks_resend_post_with_http_info(opts)
      data
    end

    # Resend failed webhooks
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResendWebhooksResponse, Integer, Hash)>] ResendWebhooksResponse data, response status code and response headers
    def webhooks_resend_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.webhooks_resend_post ...'
      end
      # resource path
      local_var_path = '/webhooks/resend'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ResendWebhooksResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth', 'bearerTokenAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.webhooks_resend_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#webhooks_resend_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Resend failed webhooks for transaction by ID
    # @param tx_id [String] The ID of the transaction for webhooks
    # @param unknown_base_type [UNKNOWN_BASE_TYPE] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def webhooks_resend_tx_id_post(tx_id, unknown_base_type, opts = {})
      webhooks_resend_tx_id_post_with_http_info(tx_id, unknown_base_type, opts)
      nil
    end

    # Resend failed webhooks for transaction by ID
    # @param tx_id [String] The ID of the transaction for webhooks
    # @param unknown_base_type [UNKNOWN_BASE_TYPE] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def webhooks_resend_tx_id_post_with_http_info(tx_id, unknown_base_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.webhooks_resend_tx_id_post ...'
      end
      # verify the required parameter 'tx_id' is set
      if @api_client.config.client_side_validation && tx_id.nil?
        fail ArgumentError, "Missing the required parameter 'tx_id' when calling DefaultApi.webhooks_resend_tx_id_post"
      end
      # resource path
      local_var_path = '/webhooks/resend/{txId}'.sub('{' + 'txId' + '}', CGI.escape(tx_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(unknown_base_type)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth', 'bearerTokenAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.webhooks_resend_tx_id_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#webhooks_resend_tx_id_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
