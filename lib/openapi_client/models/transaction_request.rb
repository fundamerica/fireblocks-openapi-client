=begin
#Fireblocks API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.5.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.3.0

=end

require 'date'
require 'time'

module OpenapiClient
  class TransactionRequest
    attr_accessor :asset_id

    attr_accessor :source

    attr_accessor :destination

    attr_accessor :amount

    # - For BTC based assets, the fee per bytes in the asset's smallest unit (Satoshi/Latoshi etc.) - For XRP, the fee for the transaction
    attr_accessor :fee

    attr_accessor :fee_level

    # - For ETH based assets only, the fee for eip-1559 transaction pricing mechanism. Value is in gwei.
    attr_accessor :priority_fee

    attr_accessor :fail_on_low_fee

    # - For ETH based assets only, must be provided when using the priorityFee parameter. This will be used to limit the fee max possible fee (according to eip-1559). Value is in gwei. - For other assets, it fails a transaction when the automatically selected fee is higher than the provided value.
    attr_accessor :max_fee

    # For ETH based asset only. this will be used instead of the fee property. Value is in gwei
    attr_accessor :gas_price

    attr_accessor :gas_limit

    attr_accessor :network_fee

    attr_accessor :note

    attr_accessor :auto_staking

    attr_accessor :network_staking

    attr_accessor :cpu_staking

    attr_accessor :extra_parameters

    attr_accessor :operation

    attr_accessor :customer_ref_id

    attr_accessor :external_tx_id

    attr_accessor :destinations

    attr_accessor :treat_as_gross_amount

    attr_accessor :force_sweep

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'asset_id' => :'assetId',
        :'source' => :'source',
        :'destination' => :'destination',
        :'amount' => :'amount',
        :'fee' => :'fee',
        :'fee_level' => :'feeLevel',
        :'priority_fee' => :'priorityFee',
        :'fail_on_low_fee' => :'failOnLowFee',
        :'max_fee' => :'maxFee',
        :'gas_price' => :'gasPrice',
        :'gas_limit' => :'gasLimit',
        :'network_fee' => :'networkFee',
        :'note' => :'note',
        :'auto_staking' => :'autoStaking',
        :'network_staking' => :'networkStaking',
        :'cpu_staking' => :'cpuStaking',
        :'extra_parameters' => :'extraParameters',
        :'operation' => :'operation',
        :'customer_ref_id' => :'customerRefId',
        :'external_tx_id' => :'externalTxId',
        :'destinations' => :'destinations',
        :'treat_as_gross_amount' => :'treatAsGrossAmount',
        :'force_sweep' => :'forceSweep'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'asset_id' => :'String',
        :'source' => :'TransferPeerPath',
        :'destination' => :'DestinationTransferPeerPath',
        :'amount' => :'OneOfnumberstring',
        :'fee' => :'OneOfnumberstring',
        :'fee_level' => :'String',
        :'priority_fee' => :'String',
        :'fail_on_low_fee' => :'Boolean',
        :'max_fee' => :'String',
        :'gas_price' => :'OneOfnumberstring',
        :'gas_limit' => :'OneOfnumberstring',
        :'network_fee' => :'OneOfnumberstring',
        :'note' => :'String',
        :'auto_staking' => :'Boolean',
        :'network_staking' => :'OneOfnumberstring',
        :'cpu_staking' => :'OneOfnumberstring',
        :'extra_parameters' => :'Object',
        :'operation' => :'TransactionOperation',
        :'customer_ref_id' => :'String',
        :'external_tx_id' => :'String',
        :'destinations' => :'Array<TransactionRequestDestination>',
        :'treat_as_gross_amount' => :'Boolean',
        :'force_sweep' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'amount',
        :'fee',
        :'gas_price',
        :'gas_limit',
        :'network_fee',
        :'network_staking',
        :'cpu_staking',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::TransactionRequest` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::TransactionRequest`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'asset_id')
        self.asset_id = attributes[:'asset_id']
      end

      if attributes.key?(:'source')
        self.source = attributes[:'source']
      end

      if attributes.key?(:'destination')
        self.destination = attributes[:'destination']
      end

      if attributes.key?(:'amount')
        self.amount = attributes[:'amount']
      end

      if attributes.key?(:'fee')
        self.fee = attributes[:'fee']
      end

      if attributes.key?(:'fee_level')
        self.fee_level = attributes[:'fee_level']
      end

      if attributes.key?(:'priority_fee')
        self.priority_fee = attributes[:'priority_fee']
      end

      if attributes.key?(:'fail_on_low_fee')
        self.fail_on_low_fee = attributes[:'fail_on_low_fee']
      end

      if attributes.key?(:'max_fee')
        self.max_fee = attributes[:'max_fee']
      end

      if attributes.key?(:'gas_price')
        self.gas_price = attributes[:'gas_price']
      end

      if attributes.key?(:'gas_limit')
        self.gas_limit = attributes[:'gas_limit']
      end

      if attributes.key?(:'network_fee')
        self.network_fee = attributes[:'network_fee']
      end

      if attributes.key?(:'note')
        self.note = attributes[:'note']
      end

      if attributes.key?(:'auto_staking')
        self.auto_staking = attributes[:'auto_staking']
      end

      if attributes.key?(:'network_staking')
        self.network_staking = attributes[:'network_staking']
      end

      if attributes.key?(:'cpu_staking')
        self.cpu_staking = attributes[:'cpu_staking']
      end

      if attributes.key?(:'extra_parameters')
        self.extra_parameters = attributes[:'extra_parameters']
      end

      if attributes.key?(:'operation')
        self.operation = attributes[:'operation']
      else
        self.operation = 'TRANSFER'
      end

      if attributes.key?(:'customer_ref_id')
        self.customer_ref_id = attributes[:'customer_ref_id']
      end

      if attributes.key?(:'external_tx_id')
        self.external_tx_id = attributes[:'external_tx_id']
      end

      if attributes.key?(:'destinations')
        if (value = attributes[:'destinations']).is_a?(Array)
          self.destinations = value
        end
      end

      if attributes.key?(:'treat_as_gross_amount')
        self.treat_as_gross_amount = attributes[:'treat_as_gross_amount']
      end

      if attributes.key?(:'force_sweep')
        self.force_sweep = attributes[:'force_sweep']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      fee_level_validator = EnumAttributeValidator.new('String', ["LOW", "MEDIUM", "HIGH"])
      return false unless fee_level_validator.valid?(@fee_level)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] fee_level Object to be assigned
    def fee_level=(fee_level)
      validator = EnumAttributeValidator.new('String', ["LOW", "MEDIUM", "HIGH"])
      unless validator.valid?(fee_level)
        fail ArgumentError, "invalid value for \"fee_level\", must be one of #{validator.allowable_values}."
      end
      @fee_level = fee_level
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          asset_id == o.asset_id &&
          source == o.source &&
          destination == o.destination &&
          amount == o.amount &&
          fee == o.fee &&
          fee_level == o.fee_level &&
          priority_fee == o.priority_fee &&
          fail_on_low_fee == o.fail_on_low_fee &&
          max_fee == o.max_fee &&
          gas_price == o.gas_price &&
          gas_limit == o.gas_limit &&
          network_fee == o.network_fee &&
          note == o.note &&
          auto_staking == o.auto_staking &&
          network_staking == o.network_staking &&
          cpu_staking == o.cpu_staking &&
          extra_parameters == o.extra_parameters &&
          operation == o.operation &&
          customer_ref_id == o.customer_ref_id &&
          external_tx_id == o.external_tx_id &&
          destinations == o.destinations &&
          treat_as_gross_amount == o.treat_as_gross_amount &&
          force_sweep == o.force_sweep
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [asset_id, source, destination, amount, fee, fee_level, priority_fee, fail_on_low_fee, max_fee, gas_price, gas_limit, network_fee, note, auto_staking, network_staking, cpu_staking, extra_parameters, operation, customer_ref_id, external_tx_id, destinations, treat_as_gross_amount, force_sweep].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
